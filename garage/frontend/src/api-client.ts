//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Обновление информации о парке
     * @return Успешное обновление информации о парке
     */
    updateParkInfo(body: Body): Promise<Anonymous> {
        let url_ = this.baseUrl + "/parks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateParkInfo(_response);
        });
    }

    protected processUpdateParkInfo(response: Response): Promise<Anonymous> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous2.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous3.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous>(null as any);
    }

    /**
     * Обновление подразделения парка
     * @return Успешное обновление подразделения
     */
    updateParkDivision(body: Body2): Promise<Anonymous4> {
        let url_ = this.baseUrl + "/parks/division";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateParkDivision(_response);
        });
    }

    protected processUpdateParkDivision(response: Response): Promise<Anonymous4> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous4.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous5.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous6.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous7.fromJS(resultData404);
            return throwException("\u041f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous4>(null as any);
    }

    /**
     * Создание подразделения парка
     * @return Успешное создание подразделения
     */
    createParkDivision(body: Body3): Promise<Anonymous8> {
        let url_ = this.baseUrl + "/parks/division";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateParkDivision(_response);
        });
    }

    protected processCreateParkDivision(response: Response): Promise<Anonymous8> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous8.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous9.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous10.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous8>(null as any);
    }

    /**
     * Обновление требований к кандидатам
     * @return Успешное обновление тарифа
     */
    updateTariff(body: Body4): Promise<Anonymous11> {
        let url_ = this.baseUrl + "/parks/tariff";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTariff(_response);
        });
    }

    protected processUpdateTariff(response: Response): Promise<Anonymous11> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous11.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous12.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous13.fromJS(resultData404);
            return throwException("\u041f\u0430\u0440\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c API \u043a\u043b\u044e\u0447\u043e\u043c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous14.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous11>(null as any);
    }

    /**
     * Требования к кандидатам
     * @return Успешное создание  тарифа
     */
    createTariff(body: Body5): Promise<Anonymous15> {
        let url_ = this.baseUrl + "/parks/tariff";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTariff(_response);
        });
    }

    protected processCreateTariff(response: Response): Promise<Anonymous15> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous15.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous16.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous17.fromJS(resultData404);
            return throwException("\u041f\u0430\u0440\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c API \u043a\u043b\u044e\u0447\u043e\u043c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = Anonymous18.fromJS(resultData409);
            return throwException("\u0412 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u0442\u0430\u0440\u0438\u0444", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous19.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous15>(null as any);
    }

    /**
     * Создание или обновление условий аренды
     * @return Успешное создание или обновление условий аренды
     */
    createOrUpdateRentTerm(body: Body6): Promise<Anonymous20> {
        let url_ = this.baseUrl + "/parks/rent-terms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdateRentTerm(_response);
        });
    }

    protected processCreateOrUpdateRentTerm(response: Response): Promise<Anonymous20> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous20.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous21.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = Anonymous22.fromJS(resultData422);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result422);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous23.fromJS(resultData404);
            return throwException("\u041f\u0430\u0440\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c API \u043a\u043b\u044e\u0447\u043e\u043c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous24.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous20>(null as any);
    }

    /**
     * Обновление информации о машине
     * @return Успешное обновление информации о машине
     */
    updateCar(body: Body7): Promise<Anonymous25> {
        let url_ = this.baseUrl + "/cars";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCar(_response);
        });
    }

    protected processUpdateCar(response: Response): Promise<Anonymous25> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous25.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous26.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous27.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous28.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous25>(null as any);
    }

    /**
     * Добавить несколько автомобилей, все добавленные автомобили будут доступны к бронированию сразу после привязки к ним Условий бронирования (метод: /cars/rent-term). Выполнение метода возможно только после выполнения методов: обновление информации о парке, создание подразделения, создание тарифа. Статус допуска в бронированию по умолчанию будет 'допущено'
     * @return Успешное добавление автомобилей
     */
    pushCars(body: Body8): Promise<Anonymous29> {
        let url_ = this.baseUrl + "/cars";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPushCars(_response);
        });
    }

    protected processPushCars(response: Response): Promise<Anonymous29> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous29.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous30.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous31.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous32.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous29>(null as any);
    }

    /**
     * Обновление условия аренды для автомобиля
     * @return Успешное обновление условия аренды для автомобиля
     */
    updateCarRentTerm(body: Body9): Promise<Anonymous33> {
        let url_ = this.baseUrl + "/cars/rent-term";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCarRentTerm(_response);
        });
    }

    protected processUpdateCarRentTerm(response: Response): Promise<Anonymous33> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous33.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous34.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous35.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous36.fromJS(resultData404);
            return throwException("\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0430\u0440\u0435\u043d\u0434\u044b \u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous37.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous33>(null as any);
    }

    /**
     * Обновление статуса допуска к бронированию
     * @return Успешное обновление статуса автомобиля
     */
    updateCarStatus(body: Body10): Promise<Anonymous38> {
        let url_ = this.baseUrl + "/cars/status";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCarStatus(_response);
        });
    }

    protected processUpdateCarStatus(response: Response): Promise<Anonymous38> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous38.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous39.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous40.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous41.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = Anonymous42.fromJS(resultData409);
            return throwException("\u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous38>(null as any);
    }

    /**
     * Обновление статуса брони автомобиля
     * @return Успешное обновление статуса брони автомобиля
     */
    updateCarBookingStatus(body: Body11): Promise<Anonymous43> {
        let url_ = this.baseUrl + "/cars/booking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCarBookingStatus(_response);
        });
    }

    protected processUpdateCarBookingStatus(response: Response): Promise<Anonymous43> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous43.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous44.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous45.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous46.fromJS(resultData404);
            return throwException("\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous47.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous43>(null as any);
    }

    /**
     * Замена забронированного авто
     * @return Замена авто прошла успешно
     */
    bookReplace(body: Body12): Promise<Anonymous48> {
        let url_ = this.baseUrl + "/cars/booking/replace";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookReplace(_response);
        });
    }

    protected processBookReplace(response: Response): Promise<Anonymous48> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous48.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous49.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous50.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous51.fromJS(resultData404);
            return throwException("\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous52.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous48>(null as any);
    }

    /**
     * Пролонгация брони автомобиля
     * @return Бронь продлена на hours ч.
     */
    bookProlongation(body: Body13): Promise<Anonymous53> {
        let url_ = this.baseUrl + "/cars/booking/prolongation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookProlongation(_response);
        });
    }

    protected processBookProlongation(response: Response): Promise<Anonymous53> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous53.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous54.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous55.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous56.fromJS(resultData404);
            return throwException("\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous57.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous53>(null as any);
    }

    /**
     * Изменить статус бронирования автомобиля, ОТ МОЕГО ГАРАЖА
     * @return Успешное изменение статуса бронирования
     */
    notifyParkOnBookingStatusChanged(body: Body14): Promise<void> {
        let url_ = this.baseUrl + "/URL_АДРЕС_ПАРКА/cars/outbound/status";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNotifyParkOnBookingStatusChanged(_response);
        });
    }

    protected processNotifyParkOnBookingStatusChanged(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Показать список парков
     * @return Успешный ответ
     */
    getParks(): Promise<Anonymous58> {
        let url_ = this.baseUrl + "/admin/parks";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetParks(_response);
        });
    }

    protected processGetParks(response: Response): Promise<Anonymous58> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous58.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous59.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous58>(null as any);
    }

    /**
     * Показать данные парка
     * @return Успешный ответ
     */
    getParkWithDetails(body: Body15): Promise<Anonymous60> {
        let url_ = this.baseUrl + "/admin/park";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetParkWithDetails(_response);
        });
    }

    protected processGetParkWithDetails(response: Response): Promise<Anonymous60> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous60.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous61.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous60>(null as any);
    }

    /**
     * Создать парк
     * @return Успешный ответ
     */
    createPark(body: Body16): Promise<Anonymous62> {
        let url_ = this.baseUrl + "/admin/park";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePark(_response);
        });
    }

    protected processCreatePark(response: Response): Promise<Anonymous62> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous62.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous63.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous62>(null as any);
    }

    /**
     * Показать список парков
     * @return Успешный ответ
     */
    getUsers(): Promise<Anonymous64> {
        let url_ = this.baseUrl + "/admin/users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUsers(_response);
        });
    }

    protected processGetUsers(response: Response): Promise<Anonymous64> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous64.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous65.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous64>(null as any);
    }

    /**
     * Получение данных пользователя (аутентифицированный запрос)
     * @return Успешная аутентификация или регистрация
     */
    getUser(): Promise<Anonymous66> {
        let url_ = this.baseUrl + "/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: Response): Promise<Anonymous66> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous66.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = Anonymous67.fromJS(resultData422);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous66>(null as any);
    }

    /**
     * Удаление пользователя и связанных записей
     * @return Пользователь успешно удален
     */
    deleteUser(): Promise<Anonymous68> {
        let url_ = this.baseUrl + "/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: Response): Promise<Anonymous68> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous68.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous69.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous68>(null as any);
    }

    /**
     * Аутентификация пользователя или регистрация нового
     * @return Успешная аутентификация или регистрация
     */
    loginOrRegister(body: Body17): Promise<Anonymous70> {
        let url_ = this.baseUrl + "/user/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoginOrRegister(_response);
        });
    }

    protected processLoginOrRegister(response: Response): Promise<Anonymous70> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous70.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = Anonymous71.fromJS(resultData422);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous70>(null as any);
    }

    /**
     * Выход пользователя из системы
     * @return Пользователь успешно вышел из системы
     */
    logout(): Promise<Anonymous72> {
        let url_ = this.baseUrl + "/user/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: Response): Promise<Anonymous72> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous72.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous73.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous72>(null as any);
    }

    /**
     * Создание и отправка проверочного кода на указанный номер телефона
     * @return Запрос успешно выполнен
     */
    createAndSendCode(body: Body18): Promise<Anonymous74> {
        let url_ = this.baseUrl + "/user/code";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateAndSendCode(_response);
        });
    }

    protected processCreateAndSendCode(response: Response): Promise<Anonymous74> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous74.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = Anonymous75.fromJS(resultData422);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous74>(null as any);
    }

    /**
     * Получение списка автомобилей с учетом фильтров (аутентифицированный запрос)
     * @return Успешный ответ
     */
    searchCars(body: Body19): Promise<Anonymous76> {
        let url_ = this.baseUrl + "/cars/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchCars(_response);
        });
    }

    protected processSearchCars(response: Response): Promise<Anonymous76> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous76.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous76>(null as any);
    }

    /**
     * Загрузить файл
     * @param file (optional) Файл для загрузки
     * @param driverDocumentType (optional) 
     * @return Файл успешно загружен
     */
    uploadFile(file: FileParameter | undefined, driverDocumentType: DriverDocumentType | undefined): Promise<Anonymous77> {
        let url_ = this.baseUrl + "/driver/upload-file";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        if (driverDocumentType === null || driverDocumentType === undefined)
            throw new Error("The parameter 'driverDocumentType' cannot be null.");
        else
            content_.append("driverDocumentType", driverDocumentType.toString());

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUploadFile(_response);
        });
    }

    protected processUploadFile(response: Response): Promise<Anonymous77> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous77.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous78.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous77>(null as any);
    }

    /**
     * Бронирование автомобиля
     * @return Успешное бронирование
     */
    book(body: Body20): Promise<Anonymous79> {
        let url_ = this.baseUrl + "/auth/cars/booking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBook(_response);
        });
    }

    protected processBook(response: Response): Promise<Anonymous79> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous79.fromJS(resultData200);
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = Anonymous80.fromJS(resultData403);
            return throwException("\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0438\u043b\u0438 \u043d\u0435 \u0432\u0435\u0440\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous81.fromJS(resultData404);
            return throwException("\u041c\u0430\u0448\u0438\u043d\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous79>(null as any);
    }

    /**
     * Отмена бронирования автомобиля (аутентифицированный запрос)
     * @return Успешный ответ
     */
    cancelBooking(body: Body21): Promise<Anonymous82> {
        let url_ = this.baseUrl + "/auth/cars/cancel-booking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancelBooking(_response);
        });
    }

    protected processCancelBooking(response: Response): Promise<Anonymous82> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous82.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous83.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = Anonymous84.fromJS(resultData403);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous85.fromJS(resultData404);
            return throwException("\u041c\u0430\u0448\u0438\u043d\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = Anonymous86.fromJS(resultData409);
            return throwException("\u041c\u0430\u0448\u0438\u043d\u0430 \u043d\u0435 \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous87.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous82>(null as any);
    }

    /**
     * Показать список брендов
     * @return Успешный ответ
     */
    getFinderFilterData(): Promise<Anonymous88> {
        let url_ = this.baseUrl + "/cars/app-data";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFinderFilterData(_response);
        });
    }

    protected processGetFinderFilterData(response: Response): Promise<Anonymous88> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous88.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous89.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous88>(null as any);
    }

    /**
     * Проверить активную бронь
     * @return Успешный ответ
     */
    checkActiveBookingDriver(body: Body22): Promise<Anonymous90> {
        let url_ = this.baseUrl + "/driver/booking/check";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckActiveBookingDriver(_response);
        });
    }

    protected processCheckActiveBookingDriver(response: Response): Promise<Anonymous90> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous90.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous91.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous90>(null as any);
    }

    /**
     * Показать парк
     * @return Успешный ответ
     */
    getParkManager(): Promise<Anonymous92> {
        let url_ = this.baseUrl + "/manager/park";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetParkManager(_response);
        });
    }

    protected processGetParkManager(response: Response): Promise<Anonymous92> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous92.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous93.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous92>(null as any);
    }

    /**
     * Показать ключ
     * @return Успешный ответ
     */
    getParkKeyManager(): Promise<Anonymous94> {
        let url_ = this.baseUrl + "/manager/park/key";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetParkKeyManager(_response);
        });
    }

    protected processGetParkKeyManager(response: Response): Promise<Anonymous94> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous94.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous95.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous94>(null as any);
    }

    /**
     * Обновление информации о парке
     * @return Успешное обновление информации о парке
     */
    updateParkInfoManager(body: Body23): Promise<Anonymous96> {
        let url_ = this.baseUrl + "/manager/parks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateParkInfoManager(_response);
        });
    }

    protected processUpdateParkInfoManager(response: Response): Promise<Anonymous96> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous96.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous97.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous98.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous96>(null as any);
    }

    /**
     * Обновление информации о машине
     * @return Успешное обновление информации о машине
     */
    updateCarManager(body: Body24): Promise<Anonymous99> {
        let url_ = this.baseUrl + "/manager/cars";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCarManager(_response);
        });
    }

    protected processUpdateCarManager(response: Response): Promise<Anonymous99> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous99.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous100.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous101.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous102.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous99>(null as any);
    }

    /**
     * Добавить несколько автомобилей, все добавленные автомобили будут доступны к бронированию сразу после привязки к ним Условий бронирования (метод: /cars/rent-term). Выполнение метода возможно только после выполнения методов: обновление информации о парке, создание подразделения, создание тарифа. Статус допуска в бронированию по умолчанию будет 'допущено'
     * @return Успешное добавление автомобилей
     */
    pushCarsManager(body: Body25): Promise<Anonymous103> {
        let url_ = this.baseUrl + "/manager/cars";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPushCarsManager(_response);
        });
    }

    protected processPushCarsManager(response: Response): Promise<Anonymous103> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous103.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous104.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous105.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous106.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous103>(null as any);
    }

    /**
     * Обновление условия аренды для автомобиля
     * @return Успешное обновление условия аренды для автомобиля
     */
    updateCarRentTermManager(body: Body26): Promise<Anonymous107> {
        let url_ = this.baseUrl + "/manager/cars/rent-term";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCarRentTermManager(_response);
        });
    }

    protected processUpdateCarRentTermManager(response: Response): Promise<Anonymous107> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous107.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous108.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous109.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous110.fromJS(resultData404);
            return throwException("\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0430\u0440\u0435\u043d\u0434\u044b \u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous111.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous107>(null as any);
    }

    /**
     * Привязка группе автомобилей rent_term
     * @param body (optional) 
     * @return Успешно
     */
    assignCarsToRentTermManager(body: Body27 | undefined): Promise<Anonymous112> {
        let url_ = this.baseUrl + "/manager/cars/rent-term";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssignCarsToRentTermManager(_response);
        });
    }

    protected processAssignCarsToRentTermManager(response: Response): Promise<Anonymous112> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous112.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous113.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous114.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous112>(null as any);
    }

    /**
     * Обновление статуса допуска к бронированию
     * @return Успешное обновление статуса автомобиля
     */
    updateCarStatusManager(body: Body28): Promise<Anonymous115> {
        let url_ = this.baseUrl + "/manager/cars/status";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCarStatusManager(_response);
        });
    }

    protected processUpdateCarStatusManager(response: Response): Promise<Anonymous115> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous115.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous116.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous117.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous118.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = Anonymous119.fromJS(resultData409);
            return throwException("\u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous115>(null as any);
    }

    /**
     * Создание или обновление условий аренды
     * @return Успешное создание или обновление условий аренды
     */
    createOrUpdateRentTermManager(body: Body29): Promise<Anonymous120> {
        let url_ = this.baseUrl + "/manager/parks/rent-terms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdateRentTermManager(_response);
        });
    }

    protected processCreateOrUpdateRentTermManager(response: Response): Promise<Anonymous120> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous120.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous121.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = Anonymous122.fromJS(resultData422);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result422);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous123.fromJS(resultData404);
            return throwException("\u041f\u0430\u0440\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c API \u043a\u043b\u044e\u0447\u043e\u043c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous124.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous120>(null as any);
    }

    /**
     * Обновление подразделения парка
     * @return Успешное обновление подразделения
     */
    updateParkDivisionManager(body: Body30): Promise<Anonymous125> {
        let url_ = this.baseUrl + "/manager/parks/division";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateParkDivisionManager(_response);
        });
    }

    protected processUpdateParkDivisionManager(response: Response): Promise<Anonymous125> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous125.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous126.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous127.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous128.fromJS(resultData404);
            return throwException("\u041f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous125>(null as any);
    }

    /**
     * Создание подразделения парка
     * @return Успешное создание подразделения
     */
    createParkDivisionManager(body: Body31): Promise<Anonymous129> {
        let url_ = this.baseUrl + "/manager/parks/division";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateParkDivisionManager(_response);
        });
    }

    protected processCreateParkDivisionManager(response: Response): Promise<Anonymous129> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous129.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous130.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous131.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous129>(null as any);
    }

    /**
     * Обновление требований к кандидатам
     * @return Успешное обновление тарифа
     */
    updateTariffManager(body: Body32): Promise<Anonymous132> {
        let url_ = this.baseUrl + "/manager/parks/tariff";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTariffManager(_response);
        });
    }

    protected processUpdateTariffManager(response: Response): Promise<Anonymous132> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous132.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous133.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous134.fromJS(resultData404);
            return throwException("\u041f\u0430\u0440\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c API \u043a\u043b\u044e\u0447\u043e\u043c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous135.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous132>(null as any);
    }

    /**
     * Требования к кандидатам
     * @return Успешное создание  тарифа
     */
    createTariffManager(body: Body33): Promise<Anonymous136> {
        let url_ = this.baseUrl + "/manager/parks/tariff";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTariffManager(_response);
        });
    }

    protected processCreateTariffManager(response: Response): Promise<Anonymous136> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous136.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous137.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous138.fromJS(resultData404);
            return throwException("\u041f\u0430\u0440\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c API \u043a\u043b\u044e\u0447\u043e\u043c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = Anonymous139.fromJS(resultData409);
            return throwException("\u0412 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u0442\u0430\u0440\u0438\u0444", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous140.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous136>(null as any);
    }

    /**
     * Обновление статуса брони автомобиля
     * @return Успешное обновление статуса брони автомобиля
     */
    updateCarBookingStatusManager(body: Body34): Promise<Anonymous141> {
        let url_ = this.baseUrl + "/manager/cars/booking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCarBookingStatusManager(_response);
        });
    }

    protected processUpdateCarBookingStatusManager(response: Response): Promise<Anonymous141> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous141.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous142.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous143.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous144.fromJS(resultData404);
            return throwException("\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous145.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous141>(null as any);
    }

    /**
     * Пролонгация брони автомобиля
     * @return Бронь продлена на hours ч.
     */
    bookProlongationManager(body: Body35): Promise<Anonymous146> {
        let url_ = this.baseUrl + "/manager/cars/booking/prolongation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookProlongationManager(_response);
        });
    }

    protected processBookProlongationManager(response: Response): Promise<Anonymous146> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous146.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous147.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous148.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous149.fromJS(resultData404);
            return throwException("\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous150.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous146>(null as any);
    }

    /**
     * Замена забронированного авто
     * @return Замена авто прошла успешно
     */
    bookReplaceManager(body: Body36): Promise<Anonymous151> {
        let url_ = this.baseUrl + "/manager/cars/booking/replace";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookReplaceManager(_response);
        });
    }

    protected processBookReplaceManager(response: Response): Promise<Anonymous151> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous151.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous152.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous153.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous154.fromJS(resultData404);
            return throwException("\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous155.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous151>(null as any);
    }

    /**
     * Добавление автомобилей из базы клиента
     * @return Успешное добавление автомобилей
     */
    pushCarsFromParkClientManager(): Promise<Anonymous156> {
        let url_ = this.baseUrl + "/manager/cars/client";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPushCarsFromParkClientManager(_response);
        });
    }

    protected processPushCarsFromParkClientManager(response: Response): Promise<Anonymous156> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous156.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous157.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous158.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous156>(null as any);
    }

    /**
     * Добавление статусов автомобилей из базы клиента
     * @return Успешное добавление статусов автомобилей
     */
    pushStatusesFromParkClientManager(): Promise<Anonymous159> {
        let url_ = this.baseUrl + "/manager/statuses/client";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPushStatusesFromParkClientManager(_response);
        });
    }

    protected processPushStatusesFromParkClientManager(response: Response): Promise<Anonymous159> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous159.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous160.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous161.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous159>(null as any);
    }

    /**
     * Получение статусов автомобилей парка
     * @return Получение статусов автомобилей парка
     */
    getParkStatusesManager(): Promise<Anonymous162> {
        let url_ = this.baseUrl + "/manager/statuses";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetParkStatusesManager(_response);
        });
    }

    protected processGetParkStatusesManager(response: Response): Promise<Anonymous162> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous162.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous163.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous164.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous162>(null as any);
    }

    /**
     * Изменение статуса автомобиля парка
     * @param body (optional) 
     * @return Изменение статуса автомобиля парка
     */
    changeParkStatusManager(body: Body37 | undefined): Promise<Anonymous165> {
        let url_ = this.baseUrl + "/manager/status";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangeParkStatusManager(_response);
        });
    }

    protected processChangeParkStatusManager(response: Response): Promise<Anonymous165> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous165.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous166.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous167.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous165>(null as any);
    }

    /**
     * Изменение логина и пароля менеджера для связи с клиентом
     * @param body (optional) 
     * @return Успешно
     */
    pushAuthDataManager(body: Body38 | undefined): Promise<Anonymous168> {
        let url_ = this.baseUrl + "/manager/auth/data";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPushAuthDataManager(_response);
        });
    }

    protected processPushAuthDataManager(response: Response): Promise<Anonymous168> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous168.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous169.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous170.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous168>(null as any);
    }

    /**
     * Добавление фотографий автомобилям
     * @param file (optional) Файлы для загрузки
     * @param ids (optional) Идентификаторы автомобилей
     * @return Успешно
     */
    pushPhotosToCarsManager(file: FileParameter[] | undefined, ids: string | undefined): Promise<Anonymous171> {
        let url_ = this.baseUrl + "/manager/cars/photos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            file.forEach(item_ => content_.append("file[]", item_.data, item_.fileName ? item_.fileName : "file[]") );
        if (ids === null || ids === undefined)
            throw new Error("The parameter 'ids' cannot be null.");
        else
            content_.append("ids", ids.toString());

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPushPhotosToCarsManager(_response);
        });
    }

    protected processPushPhotosToCarsManager(response: Response): Promise<Anonymous171> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous171.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous172.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous173.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous171>(null as any);
    }

    /**
     * Привязка группе автомобилей division_id
     * @param body (optional) 
     * @return Успешно
     */
    assignCarsToDivisionManager(body: Body39 | undefined): Promise<Anonymous174> {
        let url_ = this.baseUrl + "/manager/cars/division";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssignCarsToDivisionManager(_response);
        });
    }

    protected processAssignCarsToDivisionManager(response: Response): Promise<Anonymous174> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous174.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous175.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous176.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous174>(null as any);
    }

    /**
     * Привязка группе автомобилей тарифа
     * @param body (optional) 
     * @return Успешно
     */
    assignCarsToTariffManager(body: Body40 | undefined): Promise<Anonymous177> {
        let url_ = this.baseUrl + "/manager/cars/tariff";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssignCarsToTariffManager(_response);
        });
    }

    protected processAssignCarsToTariffManager(response: Response): Promise<Anonymous177> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous177.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous178.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous179.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous177>(null as any);
    }

    /**
     * Удаление схемы
     * @param body (optional) 
     * @return Успешно
     */
    deleteSchemaManager(body: Body41 | undefined): Promise<Anonymous180> {
        let url_ = this.baseUrl + "/manager/schema";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteSchemaManager(_response);
        });
    }

    protected processDeleteSchemaManager(response: Response): Promise<Anonymous180> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous180.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous181.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous182.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous180>(null as any);
    }

    /**
     * Получение активных бронирований
     * @return Успешно
     */
    getParkBookingsManager(): Promise<Anonymous183> {
        let url_ = this.baseUrl + "/manager/bookings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetParkBookingsManager(_response);
        });
    }

    protected processGetParkBookingsManager(response: Response): Promise<Anonymous183> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous183.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous184.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous185.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous183>(null as any);
    }

    /**
     * Проверка статусов клиента
     * @return Успешно
     */
    getCarsCurrentStatusesFromClientManager(): Promise<Anonymous186> {
        let url_ = this.baseUrl + "/manager/cars/statuses/client";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCarsCurrentStatusesFromClientManager(_response);
        });
    }

    protected processGetCarsCurrentStatusesFromClientManager(response: Response): Promise<Anonymous186> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous186.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous187.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous188.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous186>(null as any);
    }

    /**
     * Получение заявок
     * @param body (optional) 
     * @return Успешно
     */
    getParkApplicationsManager(body: Body42 | undefined): Promise<Anonymous189> {
        let url_ = this.baseUrl + "/manager/applications";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetParkApplicationsManager(_response);
        });
    }

    protected processGetParkApplicationsManager(response: Response): Promise<Anonymous189> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous189.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous190.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous191.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous189>(null as any);
    }

    /**
     * Изменение заявки
     * @param body (optional) 
     * @return Успешно
     */
    updateApplicationManager(body: Body43 | undefined): Promise<Anonymous192> {
        let url_ = this.baseUrl + "/manager/application";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateApplicationManager(_response);
        });
    }

    protected processUpdateApplicationManager(response: Response): Promise<Anonymous192> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous192.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous193.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous194.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous192>(null as any);
    }

    /**
     * Создание заявки
     * @param body (optional) 
     * @return Успешно
     */
    createApplicationManager(body: Body44 | undefined): Promise<Anonymous195> {
        let url_ = this.baseUrl + "/manager/application";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateApplicationManager(_response);
        });
    }

    protected processCreateApplicationManager(response: Response): Promise<Anonymous195> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous195.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous196.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous197.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous195>(null as any);
    }

    /**
     * Получение логов заявки
     * @param body (optional) 
     * @return Успешно
     */
    getParkApplicationsLogItemsManager(body: Body45 | undefined): Promise<Anonymous198> {
        let url_ = this.baseUrl + "/manager/application/log";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetParkApplicationsLogItemsManager(_response);
        });
    }

    protected processGetParkApplicationsLogItemsManager(response: Response): Promise<Anonymous198> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous198.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous199.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous200.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous198>(null as any);
    }

    /**
     * Получение уведомлений
     * @return Success
     */
    getNotificationsManager(): Promise<Anonymous201> {
        let url_ = this.baseUrl + "/manager/notifications";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNotificationsManager(_response);
        });
    }

    protected processGetNotificationsManager(response: Response): Promise<Anonymous201> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous201.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous202.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous203.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous201>(null as any);
    }

    /**
     * Изменение уведомлений
     * @param body (optional) 
     * @return Успешно
     */
    updateNotificationManager(body: Body46 | undefined): Promise<Anonymous204> {
        let url_ = this.baseUrl + "/manager/notification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateNotificationManager(_response);
        });
    }

    protected processUpdateNotificationManager(response: Response): Promise<Anonymous204> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous204.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous205.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous206.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous204>(null as any);
    }

    /**
     * Создание уведомлений
     * @param body (optional) 
     * @return Успешно
     */
    createNotificationManager(body: Body47 | undefined): Promise<Anonymous207> {
        let url_ = this.baseUrl + "/manager/notification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateNotificationManager(_response);
        });
    }

    protected processCreateNotificationManager(response: Response): Promise<Anonymous207> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous207.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous208.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous209.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous207>(null as any);
    }
}

/** The unique identifier of a product in our catalog */
export enum ApplicationLogType {
    Create = "Create",
    Stage = "Stage",
    Content = "Content",
    Notification = "Notification",
}

/** The unique identifier of a product in our catalog */
export enum ApplicationStage {
    New = "New",
    InProgress = "InProgress",
    NoAnswer = "NoAnswer",
    Thinking = "Thinking",
    ReservationCanceled = "ReservationCanceled",
    ReservationConfirmed = "ReservationConfirmed",
    ArrivedAtOffice = "ArrivedAtOffice",
    ArrivedAtOfficeNoCar = "ArrivedAtOfficeNoCar",
    CarRented = "CarRented",
    NotRealized = "NotRealized",
}

/** The unique identifier of a product in our catalog */
export enum BookingStatus {
    Booked = "Booked",
    UnBooked = "UnBooked",
    BookingTimeOver = "BookingTimeOver",
    RentOver = "RentOver",
    RentStart = "RentStart",
}

/** The unique identifier of a product in our catalog */
export enum CancellationSources {
    Driver = "Driver",
    Manager = "Manager",
    System = "System",
}

/** The unique identifier of a product in our catalog */
export enum CarClass {
    Economy = "Economy",
    Comfort = "Comfort",
    ComfortPlus = "ComfortPlus",
    Business = "Business",
}

/** The unique identifier of a product in our catalog */
export enum CarStatus {
    AvailableForBooking = "AvailableForBooking",
    Hidden = "Hidden",
    Booked = "Booked",
    Rented = "Rented",
}

/** The unique identifier of a product in our catalog */
export enum DayOfWeek {
    Monday = "Monday",
    Tuesday = "Tuesday",
    Wednesday = "Wednesday",
    Thursday = "Thursday",
    Friday = "Friday",
    Saturday = "Saturday",
    Sunday = "Sunday",
}

/** The unique identifier of a product in our catalog */
export enum DriverDocumentType {
    Image_licence_front = "image_licence_front",
    Image_licence_back = "image_licence_back",
    Image_pasport_front = "image_pasport_front",
    Image_pasport_address = "image_pasport_address",
    Image_fase_and_pasport = "image_fase_and_pasport",
}

/** The unique identifier of a product in our catalog */
export enum FuelType {
    Gasoline = "Gasoline",
    Methane = "Methane",
    Propane = "Propane",
    Electric = "Electric",
}

/** The unique identifier of a product in our catalog */
export enum ReferralStatus {
    NoInvited = "NoInvited",
    Invited = "Invited",
    Approved = "Approved",
}

/** The unique identifier of a product in our catalog */
export enum TransmissionType {
    Mechanics = "Mechanics",
    Automatic = "Automatic",
}

/** The unique identifier of a product in our catalog */
export enum UserStatus {
    DocumentsNotUploaded = "DocumentsNotUploaded",
    Verification = "Verification",
    Verified = "Verified",
}

/** The unique identifier of a product in our catalog */
export enum UserType {
    Driver = "Driver",
    Manager = "Manager",
    Admin = "Admin",
}

export class Body implements IBody {
    /** URL парка */
    url?: string;
    /** Комиссия */
    commission?: number;
    /** Название парка */
    park_name?: string;
    /** Срок на который можно забронировать авто, в часах */
    booking_window?: number;
    /** Описание парка */
    about?: string;
    /** id avito */
    avito_id?: string;
    /** Скидка от парка при работе с самозанятыми(не обязателньое поле) */
    self_employed_discount?: number;

    [key: string]: any;

    constructor(data?: IBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.url = _data["url"];
            this.commission = _data["commission"];
            this.park_name = _data["park_name"];
            this.booking_window = _data["booking_window"];
            this.about = _data["about"];
            this.avito_id = _data["avito_id"];
            this.self_employed_discount = _data["self_employed_discount"];
        }
    }

    static fromJS(data: any): Body {
        data = typeof data === 'object' ? data : {};
        let result = new Body();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["url"] = this.url;
        data["commission"] = this.commission;
        data["park_name"] = this.park_name;
        data["booking_window"] = this.booking_window;
        data["about"] = this.about;
        data["avito_id"] = this.avito_id;
        data["self_employed_discount"] = this.self_employed_discount;
        return data;
    }
}

export interface IBody {
    /** URL парка */
    url?: string;
    /** Комиссия */
    commission?: number;
    /** Название парка */
    park_name?: string;
    /** Срок на который можно забронировать авто, в часах */
    booking_window?: number;
    /** Описание парка */
    about?: string;
    /** id avito */
    avito_id?: string;
    /** Скидка от парка при работе с самозанятыми(не обязателньое поле) */
    self_employed_discount?: number;

    [key: string]: any;
}

export class Body2 implements IBody2 {
    /** Идентификатор подразделения */
    id?: number;
    /** Координаты подразделения */
    coords?: string;
    /** Адрес подразделения */
    address?: string;
    /** Название ближайшего метро */
    metro?: string;
    /** Название подразделения */
    name?: string;
    /** Телефон парка */
    phone?: string;
    /** Часовой пояс, разница во времени с +0 */
    timezone_difference?: number;
    /** Расписание работы парка */
    working_hours?: Working_hours[];

    [key: string]: any;

    constructor(data?: IBody2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.coords = _data["coords"];
            this.address = _data["address"];
            this.metro = _data["metro"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.timezone_difference = _data["timezone_difference"];
            if (Array.isArray(_data["working_hours"])) {
                this.working_hours = [] as any;
                for (let item of _data["working_hours"])
                    this.working_hours!.push(Working_hours.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body2 {
        data = typeof data === 'object' ? data : {};
        let result = new Body2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["coords"] = this.coords;
        data["address"] = this.address;
        data["metro"] = this.metro;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["timezone_difference"] = this.timezone_difference;
        if (Array.isArray(this.working_hours)) {
            data["working_hours"] = [];
            for (let item of this.working_hours)
                data["working_hours"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody2 {
    /** Идентификатор подразделения */
    id?: number;
    /** Координаты подразделения */
    coords?: string;
    /** Адрес подразделения */
    address?: string;
    /** Название ближайшего метро */
    metro?: string;
    /** Название подразделения */
    name?: string;
    /** Телефон парка */
    phone?: string;
    /** Часовой пояс, разница во времени с +0 */
    timezone_difference?: number;
    /** Расписание работы парка */
    working_hours?: Working_hours[];

    [key: string]: any;
}

export class Body3 implements IBody3 {
    /** Город подразделения */
    city?: string;
    /** Координаты подразделения */
    coords?: string;
    /** Адрес подразделения */
    address?: string;
    /** Название ближайшего метро */
    metro?: string;
    /** Название подразделения */
    name?: string;
    /** Телефон парка */
    phone?: string;
    /** Часовой пояс, разница во времени с +0 */
    timezone_difference?: number;
    /** Расписание работы парка */
    working_hours?: Working_hours2[];

    [key: string]: any;

    constructor(data?: IBody3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.city = _data["city"];
            this.coords = _data["coords"];
            this.address = _data["address"];
            this.metro = _data["metro"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.timezone_difference = _data["timezone_difference"];
            if (Array.isArray(_data["working_hours"])) {
                this.working_hours = [] as any;
                for (let item of _data["working_hours"])
                    this.working_hours!.push(Working_hours2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body3 {
        data = typeof data === 'object' ? data : {};
        let result = new Body3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["city"] = this.city;
        data["coords"] = this.coords;
        data["address"] = this.address;
        data["metro"] = this.metro;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["timezone_difference"] = this.timezone_difference;
        if (Array.isArray(this.working_hours)) {
            data["working_hours"] = [];
            for (let item of this.working_hours)
                data["working_hours"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody3 {
    /** Город подразделения */
    city?: string;
    /** Координаты подразделения */
    coords?: string;
    /** Адрес подразделения */
    address?: string;
    /** Название ближайшего метро */
    metro?: string;
    /** Название подразделения */
    name?: string;
    /** Телефон парка */
    phone?: string;
    /** Часовой пояс, разница во времени с +0 */
    timezone_difference?: number;
    /** Расписание работы парка */
    working_hours?: Working_hours2[];

    [key: string]: any;
}

export class Body4 implements IBody4 {
    /** id тарифа */
    id?: number;
    /** Участие в ДТП, true/false */
    has_caused_accident?: boolean | undefined;
    /** Минимальный опыт вождения */
    experience?: number | undefined;
    /** Максимальное количество штрафов */
    max_fine_count?: number | undefined;
    /** Бросал ли машину, true/false */
    abandoned_car?: boolean | undefined;
    /** минимальный скоринг */
    min_scoring?: number | undefined;
    /** Права выданы в Северном Кавказе */
    is_north_caucasus?: boolean | undefined;
    /** Массив запрещенных республик */
    criminal_ids?: string | undefined;
    /** Принимает ли что-то водитель, алкоголь/иное, true/false */
    alcohol?: boolean | undefined;

    [key: string]: any;

    constructor(data?: IBody4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.has_caused_accident = _data["has_caused_accident"];
            this.experience = _data["experience"];
            this.max_fine_count = _data["max_fine_count"];
            this.abandoned_car = _data["abandoned_car"];
            this.min_scoring = _data["min_scoring"];
            this.is_north_caucasus = _data["is_north_caucasus"];
            this.criminal_ids = _data["criminal_ids"];
            this.alcohol = _data["alcohol"];
        }
    }

    static fromJS(data: any): Body4 {
        data = typeof data === 'object' ? data : {};
        let result = new Body4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["has_caused_accident"] = this.has_caused_accident;
        data["experience"] = this.experience;
        data["max_fine_count"] = this.max_fine_count;
        data["abandoned_car"] = this.abandoned_car;
        data["min_scoring"] = this.min_scoring;
        data["is_north_caucasus"] = this.is_north_caucasus;
        data["criminal_ids"] = this.criminal_ids;
        data["alcohol"] = this.alcohol;
        return data;
    }
}

export interface IBody4 {
    /** id тарифа */
    id?: number;
    /** Участие в ДТП, true/false */
    has_caused_accident?: boolean | undefined;
    /** Минимальный опыт вождения */
    experience?: number | undefined;
    /** Максимальное количество штрафов */
    max_fine_count?: number | undefined;
    /** Бросал ли машину, true/false */
    abandoned_car?: boolean | undefined;
    /** минимальный скоринг */
    min_scoring?: number | undefined;
    /** Права выданы в Северном Кавказе */
    is_north_caucasus?: boolean | undefined;
    /** Массив запрещенных республик */
    criminal_ids?: string | undefined;
    /** Принимает ли что-то водитель, алкоголь/иное, true/false */
    alcohol?: boolean | undefined;

    [key: string]: any;
}

export class Body5 implements IBody5 {
    /** Тариф машины (1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: number | undefined;
    /** Город тарифа */
    city?: string;
    /** Участие в ДТП, true/false */
    has_caused_accident?: boolean;
    /** Минимальный опыт вождения */
    experience?: number;
    /** Максимальное количество штрафов */
    max_fine_count?: number;
    /** Бросал ли машину, true/false */
    abandoned_car?: boolean;
    /** минимальный скоринг */
    min_scoring?: number;
    /** Права выданы в Северном Кавказе */
    is_north_caucasus?: boolean;
    /** Массив запрещенных республик */
    criminal_ids?: string[];
    /** Принимает ли что-то водитель, алкоголь/иное, true/false */
    alcohol?: boolean;

    [key: string]: any;

    constructor(data?: IBody5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.class = _data["class"];
            this.city = _data["city"];
            this.has_caused_accident = _data["has_caused_accident"];
            this.experience = _data["experience"];
            this.max_fine_count = _data["max_fine_count"];
            this.abandoned_car = _data["abandoned_car"];
            this.min_scoring = _data["min_scoring"];
            this.is_north_caucasus = _data["is_north_caucasus"];
            if (Array.isArray(_data["criminal_ids"])) {
                this.criminal_ids = [] as any;
                for (let item of _data["criminal_ids"])
                    this.criminal_ids!.push(item);
            }
            this.alcohol = _data["alcohol"];
        }
    }

    static fromJS(data: any): Body5 {
        data = typeof data === 'object' ? data : {};
        let result = new Body5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["class"] = this.class;
        data["city"] = this.city;
        data["has_caused_accident"] = this.has_caused_accident;
        data["experience"] = this.experience;
        data["max_fine_count"] = this.max_fine_count;
        data["abandoned_car"] = this.abandoned_car;
        data["min_scoring"] = this.min_scoring;
        data["is_north_caucasus"] = this.is_north_caucasus;
        if (Array.isArray(this.criminal_ids)) {
            data["criminal_ids"] = [];
            for (let item of this.criminal_ids)
                data["criminal_ids"].push(item);
        }
        data["alcohol"] = this.alcohol;
        return data;
    }
}

export interface IBody5 {
    /** Тариф машины (1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: number | undefined;
    /** Город тарифа */
    city?: string;
    /** Участие в ДТП, true/false */
    has_caused_accident?: boolean;
    /** Минимальный опыт вождения */
    experience?: number;
    /** Максимальное количество штрафов */
    max_fine_count?: number;
    /** Бросал ли машину, true/false */
    abandoned_car?: boolean;
    /** минимальный скоринг */
    min_scoring?: number;
    /** Права выданы в Северном Кавказе */
    is_north_caucasus?: boolean;
    /** Массив запрещенных республик */
    criminal_ids?: string[];
    /** Принимает ли что-то водитель, алкоголь/иное, true/false */
    alcohol?: boolean;

    [key: string]: any;
}

export class Body6 implements IBody6 {
    /** Идентификатор существующего условия аренды (для обновления) */
    rent_term_id?: number | undefined;
    /** Сумма ежедневного залога */
    deposit_amount_daily?: number;
    /** Общая сумма залога */
    deposit_amount_total?: number;
    /** Возможность выкупа (true/false) */
    is_buyout_possible?: boolean;
    /** Минимальный период аренды в днях */
    minimum_period_days?: number;
    /** Название условия аренды */
    name?: string;
    /** Схемы аренды */
    schemas?: Schemas[];

    [key: string]: any;

    constructor(data?: IBody6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rent_term_id = _data["rent_term_id"];
            this.deposit_amount_daily = _data["deposit_amount_daily"];
            this.deposit_amount_total = _data["deposit_amount_total"];
            this.is_buyout_possible = _data["is_buyout_possible"];
            this.minimum_period_days = _data["minimum_period_days"];
            this.name = _data["name"];
            if (Array.isArray(_data["schemas"])) {
                this.schemas = [] as any;
                for (let item of _data["schemas"])
                    this.schemas!.push(Schemas.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body6 {
        data = typeof data === 'object' ? data : {};
        let result = new Body6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["rent_term_id"] = this.rent_term_id;
        data["deposit_amount_daily"] = this.deposit_amount_daily;
        data["deposit_amount_total"] = this.deposit_amount_total;
        data["is_buyout_possible"] = this.is_buyout_possible;
        data["minimum_period_days"] = this.minimum_period_days;
        data["name"] = this.name;
        if (Array.isArray(this.schemas)) {
            data["schemas"] = [];
            for (let item of this.schemas)
                data["schemas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody6 {
    /** Идентификатор существующего условия аренды (для обновления) */
    rent_term_id?: number | undefined;
    /** Сумма ежедневного залога */
    deposit_amount_daily?: number;
    /** Общая сумма залога */
    deposit_amount_total?: number;
    /** Возможность выкупа (true/false) */
    is_buyout_possible?: boolean;
    /** Минимальный период аренды в днях */
    minimum_period_days?: number;
    /** Название условия аренды */
    name?: string;
    /** Схемы аренды */
    schemas?: Schemas[];

    [key: string]: any;
}

export class Body7 implements IBody7 {
    /** VIN-номер машины */
    id?: string;
    /** id подразделения */
    division_id?: number;
    /** id тарифа */
    tariff_id?: number;
    /** id срока аренды */
    rent_term_id?: number;
    /** Пробег автомобиля */
    mileage?: number;
    /** Госномер автомобиля */
    license_plate?: string;
    /** Вид топлива (1 - метан, 2 - пропан, 0 - бензин, 3 - электро) */
    fuel_type?: number;
    /** Тип трансмиссии */
    transmission_type?: number;
    /** Марка автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** Класс автомобиля (0 - не указан, 1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: number | undefined;
    /** Изображения автомобиля */
    images?: string[] | undefined;

    [key: string]: any;

    constructor(data?: IBody7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.division_id = _data["division_id"];
            this.tariff_id = _data["tariff_id"];
            this.rent_term_id = _data["rent_term_id"];
            this.mileage = _data["mileage"];
            this.license_plate = _data["license_plate"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.year_produced = _data["year_produced"];
            this.class = _data["class"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
        }
    }

    static fromJS(data: any): Body7 {
        data = typeof data === 'object' ? data : {};
        let result = new Body7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["division_id"] = this.division_id;
        data["tariff_id"] = this.tariff_id;
        data["rent_term_id"] = this.rent_term_id;
        data["mileage"] = this.mileage;
        data["license_plate"] = this.license_plate;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["year_produced"] = this.year_produced;
        data["class"] = this.class;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        return data;
    }
}

export interface IBody7 {
    /** VIN-номер машины */
    id?: string;
    /** id подразделения */
    division_id?: number;
    /** id тарифа */
    tariff_id?: number;
    /** id срока аренды */
    rent_term_id?: number;
    /** Пробег автомобиля */
    mileage?: number;
    /** Госномер автомобиля */
    license_plate?: string;
    /** Вид топлива (1 - метан, 2 - пропан, 0 - бензин, 3 - электро) */
    fuel_type?: number;
    /** Тип трансмиссии */
    transmission_type?: number;
    /** Марка автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** Класс автомобиля (0 - не указан, 1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: number | undefined;
    /** Изображения автомобиля */
    images?: string[] | undefined;

    [key: string]: any;
}

export class Body8 implements IBody8 {
    cars?: Cars[];

    [key: string]: any;

    constructor(data?: IBody8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cars"])) {
                this.cars = [] as any;
                for (let item of _data["cars"])
                    this.cars!.push(Cars.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body8 {
        data = typeof data === 'object' ? data : {};
        let result = new Body8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cars)) {
            data["cars"] = [];
            for (let item of this.cars)
                data["cars"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody8 {
    cars?: Cars[];

    [key: string]: any;
}

export class Body9 implements IBody9 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Идентификатор условия аренды */
    rent_term_id?: number;

    [key: string]: any;

    constructor(data?: IBody9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.rent_term_id = _data["rent_term_id"];
        }
    }

    static fromJS(data: any): Body9 {
        data = typeof data === 'object' ? data : {};
        let result = new Body9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["rent_term_id"] = this.rent_term_id;
        return data;
    }
}

export interface IBody9 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Идентификатор условия аренды */
    rent_term_id?: number;

    [key: string]: any;
}

export class Body10 implements IBody10 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Допуск автомобиля к бронированию. 1 - допущен, 0 - заблокирован */
    status?: number;

    [key: string]: any;

    constructor(data?: IBody10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Body10 {
        data = typeof data === 'object' ? data : {};
        let result = new Body10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["status"] = this.status;
        return data;
    }
}

export interface IBody10 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Допуск автомобиля к бронированию. 1 - допущен, 0 - заблокирован */
    status?: number;

    [key: string]: any;
}

export class Body11 implements IBody11 {
    /** VIN-номер автомобиля */
    car_id?: string;
    status?: BookingStatus;

    [key: string]: any;

    constructor(data?: IBody11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.car_id = _data["car_id"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Body11 {
        data = typeof data === 'object' ? data : {};
        let result = new Body11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["car_id"] = this.car_id;
        data["status"] = this.status;
        return data;
    }
}

export interface IBody11 {
    /** VIN-номер автомобиля */
    car_id?: string;
    status?: BookingStatus;

    [key: string]: any;
}

export class Body12 implements IBody12 {
    /** VIN-номер текущего автомобиля */
    car_id?: string;
    /** VIN-номер нового автомобиля */
    new_car_id?: string;

    [key: string]: any;

    constructor(data?: IBody12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.car_id = _data["car_id"];
            this.new_car_id = _data["new_car_id"];
        }
    }

    static fromJS(data: any): Body12 {
        data = typeof data === 'object' ? data : {};
        let result = new Body12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["car_id"] = this.car_id;
        data["new_car_id"] = this.new_car_id;
        return data;
    }
}

export interface IBody12 {
    /** VIN-номер текущего автомобиля */
    car_id?: string;
    /** VIN-номер нового автомобиля */
    new_car_id?: string;

    [key: string]: any;
}

export class Body13 implements IBody13 {
    /** VIN-номер автомобиля */
    car_id?: string;
    /** Время в часах, на которое нужно продлить бронь */
    hours?: number;

    [key: string]: any;

    constructor(data?: IBody13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.car_id = _data["car_id"];
            this.hours = _data["hours"];
        }
    }

    static fromJS(data: any): Body13 {
        data = typeof data === 'object' ? data : {};
        let result = new Body13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["car_id"] = this.car_id;
        data["hours"] = this.hours;
        return data;
    }
}

export interface IBody13 {
    /** VIN-номер автомобиля */
    car_id?: string;
    /** Время в часах, на которое нужно продлить бронь */
    hours?: number;

    [key: string]: any;
}

export class Body14 implements IBody14 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Статус бронирования. 1 - забронировано, 0 - бронь отменена */
    is_booked?: number;
    /** ФИО водителя */
    driver_name?: string;
    /** Телефон водителя */
    phone?: string;
    schema?: Schema[];

    [key: string]: any;

    constructor(data?: IBody14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.is_booked = _data["is_booked"];
            this.driver_name = _data["driver_name"];
            this.phone = _data["phone"];
            if (Array.isArray(_data["schema"])) {
                this.schema = [] as any;
                for (let item of _data["schema"])
                    this.schema!.push(Schema.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body14 {
        data = typeof data === 'object' ? data : {};
        let result = new Body14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["is_booked"] = this.is_booked;
        data["driver_name"] = this.driver_name;
        data["phone"] = this.phone;
        if (Array.isArray(this.schema)) {
            data["schema"] = [];
            for (let item of this.schema)
                data["schema"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody14 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Статус бронирования. 1 - забронировано, 0 - бронь отменена */
    is_booked?: number;
    /** ФИО водителя */
    driver_name?: string;
    /** Телефон водителя */
    phone?: string;
    schema?: Schema[];

    [key: string]: any;
}

export class Body15 implements IBody15 {
    /** id парка */
    id?: number;

    [key: string]: any;

    constructor(data?: IBody15) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Body15 {
        data = typeof data === 'object' ? data : {};
        let result = new Body15();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IBody15 {
    /** id парка */
    id?: number;

    [key: string]: any;
}

export class Body16 implements IBody16 {
    /** Имя парка */
    name?: string;
    /** Телефон менеджера */
    manager_phone?: string;

    [key: string]: any;

    constructor(data?: IBody16) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.manager_phone = _data["manager_phone"];
        }
    }

    static fromJS(data: any): Body16 {
        data = typeof data === 'object' ? data : {};
        let result = new Body16();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["manager_phone"] = this.manager_phone;
        return data;
    }
}

export interface IBody16 {
    /** Имя парка */
    name?: string;
    /** Телефон менеджера */
    manager_phone?: string;

    [key: string]: any;
}

export class Body17 implements IBody17 {
    /** Номер телефона пользователя */
    phone?: string;
    /** Код аутентификации */
    code?: number;
    type?: UserType;
    /** Ключ */
    api_key?: string;
    /** Код пригласившего */
    referral_code?: string;

    [key: string]: any;

    constructor(data?: IBody17) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.phone = _data["phone"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.api_key = _data["api_key"];
            this.referral_code = _data["referral_code"];
        }
    }

    static fromJS(data: any): Body17 {
        data = typeof data === 'object' ? data : {};
        let result = new Body17();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["phone"] = this.phone;
        data["code"] = this.code;
        data["type"] = this.type;
        data["api_key"] = this.api_key;
        data["referral_code"] = this.referral_code;
        return data;
    }
}

export interface IBody17 {
    /** Номер телефона пользователя */
    phone?: string;
    /** Код аутентификации */
    code?: number;
    type?: UserType;
    /** Ключ */
    api_key?: string;
    /** Код пригласившего */
    referral_code?: string;

    [key: string]: any;
}

export class Body18 implements IBody18 {
    /** Номер телефона пользователя */
    phone?: string;

    [key: string]: any;

    constructor(data?: IBody18) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.phone = _data["phone"];
        }
    }

    static fromJS(data: any): Body18 {
        data = typeof data === 'object' ? data : {};
        let result = new Body18();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["phone"] = this.phone;
        return data;
    }
}

export interface IBody18 {
    /** Номер телефона пользователя */
    phone?: string;

    [key: string]: any;
}

export class Body19 implements IBody19 {
    /** Смещение (начальная позиция) для выборки */
    offset?: number;
    /** Максимальное количество записей для выборки */
    limit?: number;
    /** Название города */
    city?: string;
    /** Комиссия парка */
    commission?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Марка автомобиля */
    brand?: any[];
    /** Парк автомобиля */
    park_name?: any[];
    /** Марка или модель автомобиля */
    search?: any[];
    /** сортировка, asc или desc */
    sorting?: string;
    /** VIN авто */
    car_vin?: string;
    /** Данные о сроке аренды */
    schemas?: Schemas2;
    /** Возможность выкупа */
    is_buyout_possible?: boolean;
    /** Модель автомобиля */
    model?: any[];
    /** Класс автомобиля (1 - Эконом, 2 - Комфорт, 3 - Комфорт+, 4 - Бизнес) */
    car_class?: CarClass[];

    [key: string]: any;

    constructor(data?: IBody19) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.offset = _data["offset"];
            this.limit = _data["limit"];
            this.city = _data["city"];
            this.commission = _data["commission"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            if (Array.isArray(_data["brand"])) {
                this.brand = [] as any;
                for (let item of _data["brand"])
                    this.brand!.push(item);
            }
            if (Array.isArray(_data["park_name"])) {
                this.park_name = [] as any;
                for (let item of _data["park_name"])
                    this.park_name!.push(item);
            }
            if (Array.isArray(_data["search"])) {
                this.search = [] as any;
                for (let item of _data["search"])
                    this.search!.push(item);
            }
            this.sorting = _data["sorting"];
            this.car_vin = _data["car_vin"];
            this.schemas = _data["schemas"] ? Schemas2.fromJS(_data["schemas"]) : <any>undefined;
            this.is_buyout_possible = _data["is_buyout_possible"];
            if (Array.isArray(_data["model"])) {
                this.model = [] as any;
                for (let item of _data["model"])
                    this.model!.push(item);
            }
            if (Array.isArray(_data["car_class"])) {
                this.car_class = [] as any;
                for (let item of _data["car_class"])
                    this.car_class!.push(item);
            }
        }
    }

    static fromJS(data: any): Body19 {
        data = typeof data === 'object' ? data : {};
        let result = new Body19();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["offset"] = this.offset;
        data["limit"] = this.limit;
        data["city"] = this.city;
        data["commission"] = this.commission;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        if (Array.isArray(this.brand)) {
            data["brand"] = [];
            for (let item of this.brand)
                data["brand"].push(item);
        }
        if (Array.isArray(this.park_name)) {
            data["park_name"] = [];
            for (let item of this.park_name)
                data["park_name"].push(item);
        }
        if (Array.isArray(this.search)) {
            data["search"] = [];
            for (let item of this.search)
                data["search"].push(item);
        }
        data["sorting"] = this.sorting;
        data["car_vin"] = this.car_vin;
        data["schemas"] = this.schemas ? this.schemas.toJSON() : <any>undefined;
        data["is_buyout_possible"] = this.is_buyout_possible;
        if (Array.isArray(this.model)) {
            data["model"] = [];
            for (let item of this.model)
                data["model"].push(item);
        }
        if (Array.isArray(this.car_class)) {
            data["car_class"] = [];
            for (let item of this.car_class)
                data["car_class"].push(item);
        }
        return data;
    }
}

export interface IBody19 {
    /** Смещение (начальная позиция) для выборки */
    offset?: number;
    /** Максимальное количество записей для выборки */
    limit?: number;
    /** Название города */
    city?: string;
    /** Комиссия парка */
    commission?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Марка автомобиля */
    brand?: any[];
    /** Парк автомобиля */
    park_name?: any[];
    /** Марка или модель автомобиля */
    search?: any[];
    /** сортировка, asc или desc */
    sorting?: string;
    /** VIN авто */
    car_vin?: string;
    /** Данные о сроке аренды */
    schemas?: Schemas2;
    /** Возможность выкупа */
    is_buyout_possible?: boolean;
    /** Модель автомобиля */
    model?: any[];
    /** Класс автомобиля (1 - Эконом, 2 - Комфорт, 3 - Комфорт+, 4 - Бизнес) */
    car_class?: CarClass[];

    [key: string]: any;
}

export class Body20 implements IBody20 {
    /** Идентификатор машины */
    id?: number;
    /** Идентификатор схемы аренды */
    schema_id?: number;

    [key: string]: any;

    constructor(data?: IBody20) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.schema_id = _data["schema_id"];
        }
    }

    static fromJS(data: any): Body20 {
        data = typeof data === 'object' ? data : {};
        let result = new Body20();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["schema_id"] = this.schema_id;
        return data;
    }
}

export interface IBody20 {
    /** Идентификатор машины */
    id?: number;
    /** Идентификатор схемы аренды */
    schema_id?: number;

    [key: string]: any;
}

export class Body21 implements IBody21 {
    /** Идентификатор автомобиля, для которого необходимо отменить бронирование */
    id?: number;
    /** Причина отмены */
    reason?: string;

    [key: string]: any;

    constructor(data?: IBody21) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): Body21 {
        data = typeof data === 'object' ? data : {};
        let result = new Body21();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["reason"] = this.reason;
        return data;
    }
}

export interface IBody21 {
    /** Идентификатор автомобиля, для которого необходимо отменить бронирование */
    id?: number;
    /** Причина отмены */
    reason?: string;

    [key: string]: any;
}

export class Body22 implements IBody22 {
    /** Идентификатор брони */
    id?: number;

    [key: string]: any;

    constructor(data?: IBody22) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Body22 {
        data = typeof data === 'object' ? data : {};
        let result = new Body22();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IBody22 {
    /** Идентификатор брони */
    id?: number;

    [key: string]: any;
}

export class Body23 implements IBody23 {
    /** URL парка */
    url?: string;
    /** Комиссия */
    commission?: number;
    /** Название парка */
    park_name?: string;
    /** Срок на который можно забронировать авто, в часах */
    booking_window?: number;
    /** Описание парка */
    about?: string;
    /** id avito */
    avito_id?: string;
    /** Скидка от парка при работе с самозанятыми(не обязателньое поле) */
    self_employed_discount?: number;

    [key: string]: any;

    constructor(data?: IBody23) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.url = _data["url"];
            this.commission = _data["commission"];
            this.park_name = _data["park_name"];
            this.booking_window = _data["booking_window"];
            this.about = _data["about"];
            this.avito_id = _data["avito_id"];
            this.self_employed_discount = _data["self_employed_discount"];
        }
    }

    static fromJS(data: any): Body23 {
        data = typeof data === 'object' ? data : {};
        let result = new Body23();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["url"] = this.url;
        data["commission"] = this.commission;
        data["park_name"] = this.park_name;
        data["booking_window"] = this.booking_window;
        data["about"] = this.about;
        data["avito_id"] = this.avito_id;
        data["self_employed_discount"] = this.self_employed_discount;
        return data;
    }
}

export interface IBody23 {
    /** URL парка */
    url?: string;
    /** Комиссия */
    commission?: number;
    /** Название парка */
    park_name?: string;
    /** Срок на который можно забронировать авто, в часах */
    booking_window?: number;
    /** Описание парка */
    about?: string;
    /** id avito */
    avito_id?: string;
    /** Скидка от парка при работе с самозанятыми(не обязателньое поле) */
    self_employed_discount?: number;

    [key: string]: any;
}

export class Body24 implements IBody24 {
    /** VIN-номер машины */
    id?: string;
    /** id подразделения */
    division_id?: number;
    /** Пробег автомобиля */
    mileage?: number;
    fuel_type?: FuelType;
    /** Госномер автомобиля */
    license_plate?: string;
    car_class?: CarClass;
    /** Изображения машины */
    images?: string[] | undefined;

    [key: string]: any;

    constructor(data?: IBody24) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.division_id = _data["division_id"];
            this.mileage = _data["mileage"];
            this.fuel_type = _data["fuel_type"];
            this.license_plate = _data["license_plate"];
            this.car_class = _data["car_class"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
        }
    }

    static fromJS(data: any): Body24 {
        data = typeof data === 'object' ? data : {};
        let result = new Body24();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["division_id"] = this.division_id;
        data["mileage"] = this.mileage;
        data["fuel_type"] = this.fuel_type;
        data["license_plate"] = this.license_plate;
        data["car_class"] = this.car_class;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        return data;
    }
}

export interface IBody24 {
    /** VIN-номер машины */
    id?: string;
    /** id подразделения */
    division_id?: number;
    /** Пробег автомобиля */
    mileage?: number;
    fuel_type?: FuelType;
    /** Госномер автомобиля */
    license_plate?: string;
    car_class?: CarClass;
    /** Изображения машины */
    images?: string[] | undefined;

    [key: string]: any;
}

export class Body25 implements IBody25 {
    cars?: Cars2[];

    [key: string]: any;

    constructor(data?: IBody25) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cars"])) {
                this.cars = [] as any;
                for (let item of _data["cars"])
                    this.cars!.push(Cars2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body25 {
        data = typeof data === 'object' ? data : {};
        let result = new Body25();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cars)) {
            data["cars"] = [];
            for (let item of this.cars)
                data["cars"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody25 {
    cars?: Cars2[];

    [key: string]: any;
}

export class Body26 implements IBody26 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Идентификатор условия аренды */
    rent_term_id?: number;

    [key: string]: any;

    constructor(data?: IBody26) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.rent_term_id = _data["rent_term_id"];
        }
    }

    static fromJS(data: any): Body26 {
        data = typeof data === 'object' ? data : {};
        let result = new Body26();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["rent_term_id"] = this.rent_term_id;
        return data;
    }
}

export interface IBody26 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Идентификатор условия аренды */
    rent_term_id?: number;

    [key: string]: any;
}

export class Body27 implements IBody27 {
    /** Идентификатор срока аренды */
    rent_term_id?: number;
    /** Идентификаторы автомобилей */
    car_ids?: number[];

    [key: string]: any;

    constructor(data?: IBody27) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rent_term_id = _data["rent_term_id"];
            if (Array.isArray(_data["car_ids"])) {
                this.car_ids = [] as any;
                for (let item of _data["car_ids"])
                    this.car_ids!.push(item);
            }
        }
    }

    static fromJS(data: any): Body27 {
        data = typeof data === 'object' ? data : {};
        let result = new Body27();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["rent_term_id"] = this.rent_term_id;
        if (Array.isArray(this.car_ids)) {
            data["car_ids"] = [];
            for (let item of this.car_ids)
                data["car_ids"].push(item);
        }
        return data;
    }
}

export interface IBody27 {
    /** Идентификатор срока аренды */
    rent_term_id?: number;
    /** Идентификаторы автомобилей */
    car_ids?: number[];

    [key: string]: any;
}

export class Body28 implements IBody28 {
    /** VIN-номер автомобиля */
    id?: string;
    status?: CarStatus;

    [key: string]: any;

    constructor(data?: IBody28) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Body28 {
        data = typeof data === 'object' ? data : {};
        let result = new Body28();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["status"] = this.status;
        return data;
    }
}

export interface IBody28 {
    /** VIN-номер автомобиля */
    id?: string;
    status?: CarStatus;

    [key: string]: any;
}

export class Body29 implements IBody29 {
    /** Идентификатор существующего условия аренды (для обновления) */
    rent_term_id?: number | undefined;
    /** Сумма ежедневного залога */
    deposit_amount_daily?: number;
    /** Общая сумма залога */
    deposit_amount_total?: number;
    /** Возможность выкупа (true/false) */
    is_buyout_possible?: boolean;
    /** Минимальный период аренды в днях */
    minimum_period_days?: number;
    /** Название условия аренды */
    name?: string;
    /** Схемы аренды */
    schemas?: Schemas3[];

    [key: string]: any;

    constructor(data?: IBody29) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rent_term_id = _data["rent_term_id"];
            this.deposit_amount_daily = _data["deposit_amount_daily"];
            this.deposit_amount_total = _data["deposit_amount_total"];
            this.is_buyout_possible = _data["is_buyout_possible"];
            this.minimum_period_days = _data["minimum_period_days"];
            this.name = _data["name"];
            if (Array.isArray(_data["schemas"])) {
                this.schemas = [] as any;
                for (let item of _data["schemas"])
                    this.schemas!.push(Schemas3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body29 {
        data = typeof data === 'object' ? data : {};
        let result = new Body29();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["rent_term_id"] = this.rent_term_id;
        data["deposit_amount_daily"] = this.deposit_amount_daily;
        data["deposit_amount_total"] = this.deposit_amount_total;
        data["is_buyout_possible"] = this.is_buyout_possible;
        data["minimum_period_days"] = this.minimum_period_days;
        data["name"] = this.name;
        if (Array.isArray(this.schemas)) {
            data["schemas"] = [];
            for (let item of this.schemas)
                data["schemas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody29 {
    /** Идентификатор существующего условия аренды (для обновления) */
    rent_term_id?: number | undefined;
    /** Сумма ежедневного залога */
    deposit_amount_daily?: number;
    /** Общая сумма залога */
    deposit_amount_total?: number;
    /** Возможность выкупа (true/false) */
    is_buyout_possible?: boolean;
    /** Минимальный период аренды в днях */
    minimum_period_days?: number;
    /** Название условия аренды */
    name?: string;
    /** Схемы аренды */
    schemas?: Schemas3[];

    [key: string]: any;
}

export class Body30 implements IBody30 {
    /** Идентификатор подразделения */
    id?: number;
    /** Координаты подразделения */
    coords?: string;
    /** Адрес подразделения */
    address?: string;
    /** Название ближайшего метро */
    metro?: string;
    /** Название подразделения */
    name?: string;
    /** Телефон парка */
    phone?: string;
    /** Часовой пояс, разница во времени с +0 */
    timezone_difference?: number;
    /** Расписание работы парка */
    working_hours?: Working_hours3[];

    [key: string]: any;

    constructor(data?: IBody30) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.coords = _data["coords"];
            this.address = _data["address"];
            this.metro = _data["metro"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.timezone_difference = _data["timezone_difference"];
            if (Array.isArray(_data["working_hours"])) {
                this.working_hours = [] as any;
                for (let item of _data["working_hours"])
                    this.working_hours!.push(Working_hours3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body30 {
        data = typeof data === 'object' ? data : {};
        let result = new Body30();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["coords"] = this.coords;
        data["address"] = this.address;
        data["metro"] = this.metro;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["timezone_difference"] = this.timezone_difference;
        if (Array.isArray(this.working_hours)) {
            data["working_hours"] = [];
            for (let item of this.working_hours)
                data["working_hours"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody30 {
    /** Идентификатор подразделения */
    id?: number;
    /** Координаты подразделения */
    coords?: string;
    /** Адрес подразделения */
    address?: string;
    /** Название ближайшего метро */
    metro?: string;
    /** Название подразделения */
    name?: string;
    /** Телефон парка */
    phone?: string;
    /** Часовой пояс, разница во времени с +0 */
    timezone_difference?: number;
    /** Расписание работы парка */
    working_hours?: Working_hours3[];

    [key: string]: any;
}

export class Body31 implements IBody31 {
    /** Город подразделения */
    city?: string;
    /** Координаты подразделения */
    coords?: string;
    /** Адрес подразделения */
    address?: string;
    /** Название ближайшего метро */
    metro?: string;
    /** Название подразделения */
    name?: string;
    /** Телефон парка */
    phone?: string;
    /** Часовой пояс, разница во времени с +0 */
    timezone_difference?: number;
    /** Расписание работы парка */
    working_hours?: Working_hours4[];

    [key: string]: any;

    constructor(data?: IBody31) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.city = _data["city"];
            this.coords = _data["coords"];
            this.address = _data["address"];
            this.metro = _data["metro"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.timezone_difference = _data["timezone_difference"];
            if (Array.isArray(_data["working_hours"])) {
                this.working_hours = [] as any;
                for (let item of _data["working_hours"])
                    this.working_hours!.push(Working_hours4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body31 {
        data = typeof data === 'object' ? data : {};
        let result = new Body31();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["city"] = this.city;
        data["coords"] = this.coords;
        data["address"] = this.address;
        data["metro"] = this.metro;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["timezone_difference"] = this.timezone_difference;
        if (Array.isArray(this.working_hours)) {
            data["working_hours"] = [];
            for (let item of this.working_hours)
                data["working_hours"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody31 {
    /** Город подразделения */
    city?: string;
    /** Координаты подразделения */
    coords?: string;
    /** Адрес подразделения */
    address?: string;
    /** Название ближайшего метро */
    metro?: string;
    /** Название подразделения */
    name?: string;
    /** Телефон парка */
    phone?: string;
    /** Часовой пояс, разница во времени с +0 */
    timezone_difference?: number;
    /** Расписание работы парка */
    working_hours?: Working_hours4[];

    [key: string]: any;
}

export class Body32 implements IBody32 {
    /** id тарифа */
    id?: number;
    /** Участие в ДТП, true/false */
    has_caused_accident?: boolean | undefined;
    /** Минимальный опыт вождения */
    experience?: number | undefined;
    /** Максимальное количество штрафов */
    max_fine_count?: number | undefined;
    /** Бросал ли машину, true/false */
    abandoned_car?: boolean | undefined;
    /** минимальный скоринг */
    min_scoring?: number | undefined;
    /** Права выданы в Северном Кавказе */
    is_north_caucasus?: boolean | undefined;
    /** Массив запрещенных республик */
    criminal_ids?: string | undefined;
    /** Принимает ли что-то водитель, алкоголь/иное, true/false */
    alcohol?: boolean | undefined;

    [key: string]: any;

    constructor(data?: IBody32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.has_caused_accident = _data["has_caused_accident"];
            this.experience = _data["experience"];
            this.max_fine_count = _data["max_fine_count"];
            this.abandoned_car = _data["abandoned_car"];
            this.min_scoring = _data["min_scoring"];
            this.is_north_caucasus = _data["is_north_caucasus"];
            this.criminal_ids = _data["criminal_ids"];
            this.alcohol = _data["alcohol"];
        }
    }

    static fromJS(data: any): Body32 {
        data = typeof data === 'object' ? data : {};
        let result = new Body32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["has_caused_accident"] = this.has_caused_accident;
        data["experience"] = this.experience;
        data["max_fine_count"] = this.max_fine_count;
        data["abandoned_car"] = this.abandoned_car;
        data["min_scoring"] = this.min_scoring;
        data["is_north_caucasus"] = this.is_north_caucasus;
        data["criminal_ids"] = this.criminal_ids;
        data["alcohol"] = this.alcohol;
        return data;
    }
}

export interface IBody32 {
    /** id тарифа */
    id?: number;
    /** Участие в ДТП, true/false */
    has_caused_accident?: boolean | undefined;
    /** Минимальный опыт вождения */
    experience?: number | undefined;
    /** Максимальное количество штрафов */
    max_fine_count?: number | undefined;
    /** Бросал ли машину, true/false */
    abandoned_car?: boolean | undefined;
    /** минимальный скоринг */
    min_scoring?: number | undefined;
    /** Права выданы в Северном Кавказе */
    is_north_caucasus?: boolean | undefined;
    /** Массив запрещенных республик */
    criminal_ids?: string | undefined;
    /** Принимает ли что-то водитель, алкоголь/иное, true/false */
    alcohol?: boolean | undefined;

    [key: string]: any;
}

export class Body33 implements IBody33 {
    /** Тариф машины (1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: CarClass | undefined;
    /** Город тарифа */
    city?: string;
    /** Участие в ДТП, true/false */
    has_caused_accident?: boolean;
    /** Минимальный опыт вождения */
    experience?: number;
    /** Максимальное количество штрафов */
    max_fine_count?: number;
    /** Бросал ли машину, true/false */
    abandoned_car?: boolean;
    /** минимальный скоринг */
    min_scoring?: number;
    /** Права выданы в Северном Кавказе */
    is_north_caucasus?: boolean;
    /** Массив запрещенных республик */
    criminal_ids?: string[];
    /** Принимает ли что-то водитель, алкоголь/иное, true/false */
    alcohol?: boolean;

    [key: string]: any;

    constructor(data?: IBody33) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.class = _data["class"];
            this.city = _data["city"];
            this.has_caused_accident = _data["has_caused_accident"];
            this.experience = _data["experience"];
            this.max_fine_count = _data["max_fine_count"];
            this.abandoned_car = _data["abandoned_car"];
            this.min_scoring = _data["min_scoring"];
            this.is_north_caucasus = _data["is_north_caucasus"];
            if (Array.isArray(_data["criminal_ids"])) {
                this.criminal_ids = [] as any;
                for (let item of _data["criminal_ids"])
                    this.criminal_ids!.push(item);
            }
            this.alcohol = _data["alcohol"];
        }
    }

    static fromJS(data: any): Body33 {
        data = typeof data === 'object' ? data : {};
        let result = new Body33();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["class"] = this.class;
        data["city"] = this.city;
        data["has_caused_accident"] = this.has_caused_accident;
        data["experience"] = this.experience;
        data["max_fine_count"] = this.max_fine_count;
        data["abandoned_car"] = this.abandoned_car;
        data["min_scoring"] = this.min_scoring;
        data["is_north_caucasus"] = this.is_north_caucasus;
        if (Array.isArray(this.criminal_ids)) {
            data["criminal_ids"] = [];
            for (let item of this.criminal_ids)
                data["criminal_ids"].push(item);
        }
        data["alcohol"] = this.alcohol;
        return data;
    }
}

export interface IBody33 {
    /** Тариф машины (1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: CarClass | undefined;
    /** Город тарифа */
    city?: string;
    /** Участие в ДТП, true/false */
    has_caused_accident?: boolean;
    /** Минимальный опыт вождения */
    experience?: number;
    /** Максимальное количество штрафов */
    max_fine_count?: number;
    /** Бросал ли машину, true/false */
    abandoned_car?: boolean;
    /** минимальный скоринг */
    min_scoring?: number;
    /** Права выданы в Северном Кавказе */
    is_north_caucasus?: boolean;
    /** Массив запрещенных республик */
    criminal_ids?: string[];
    /** Принимает ли что-то водитель, алкоголь/иное, true/false */
    alcohol?: boolean;

    [key: string]: any;
}

export class Body34 implements IBody34 {
    /** VIN-номер автомобиля */
    vin?: string;
    /** Причина отмены */
    reason?: string | undefined;
    status?: BookingStatus;

    [key: string]: any;

    constructor(data?: IBody34) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.vin = _data["vin"];
            this.reason = _data["reason"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Body34 {
        data = typeof data === 'object' ? data : {};
        let result = new Body34();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["vin"] = this.vin;
        data["reason"] = this.reason;
        data["status"] = this.status;
        return data;
    }
}

export interface IBody34 {
    /** VIN-номер автомобиля */
    vin?: string;
    /** Причина отмены */
    reason?: string | undefined;
    status?: BookingStatus;

    [key: string]: any;
}

export class Body35 implements IBody35 {
    /** VIN-номер автомобиля */
    vin?: string;
    /** Время в часах, на которое нужно продлить бронь */
    hours?: number;

    [key: string]: any;

    constructor(data?: IBody35) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.vin = _data["vin"];
            this.hours = _data["hours"];
        }
    }

    static fromJS(data: any): Body35 {
        data = typeof data === 'object' ? data : {};
        let result = new Body35();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["vin"] = this.vin;
        data["hours"] = this.hours;
        return data;
    }
}

export interface IBody35 {
    /** VIN-номер автомобиля */
    vin?: string;
    /** Время в часах, на которое нужно продлить бронь */
    hours?: number;

    [key: string]: any;
}

export class Body36 implements IBody36 {
    /** VIN-номер текущего автомобиля */
    vin?: string;
    /** VIN-номер нового автомобиля */
    new_vin?: string;

    [key: string]: any;

    constructor(data?: IBody36) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.vin = _data["vin"];
            this.new_vin = _data["new_vin"];
        }
    }

    static fromJS(data: any): Body36 {
        data = typeof data === 'object' ? data : {};
        let result = new Body36();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["vin"] = this.vin;
        data["new_vin"] = this.new_vin;
        return data;
    }
}

export interface IBody36 {
    /** VIN-номер текущего автомобиля */
    vin?: string;
    /** VIN-номер нового автомобиля */
    new_vin?: string;

    [key: string]: any;
}

export class Body37 implements IBody37 {
    /** Id статуса */
    id?: number;
    /** Значение статуса */
    status_name?: string;

    [key: string]: any;

    constructor(data?: IBody37) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.status_name = _data["status_name"];
        }
    }

    static fromJS(data: any): Body37 {
        data = typeof data === 'object' ? data : {};
        let result = new Body37();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["status_name"] = this.status_name;
        return data;
    }
}

export interface IBody37 {
    /** Id статуса */
    id?: number;
    /** Значение статуса */
    status_name?: string;

    [key: string]: any;
}

export class Body38 implements IBody38 {
    /** Новое имя пользователя 1с */
    name?: string;
    /** Новый пароль пользователя 1с */
    password?: string;

    [key: string]: any;

    constructor(data?: IBody38) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): Body38 {
        data = typeof data === 'object' ? data : {};
        let result = new Body38();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["password"] = this.password;
        return data;
    }
}

export interface IBody38 {
    /** Новое имя пользователя 1с */
    name?: string;
    /** Новый пароль пользователя 1с */
    password?: string;

    [key: string]: any;
}

export class Body39 implements IBody39 {
    /** Идентификатор division */
    division_id?: number;
    /** Идентификаторы автомобилей */
    car_ids?: number[];

    [key: string]: any;

    constructor(data?: IBody39) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.division_id = _data["division_id"];
            if (Array.isArray(_data["car_ids"])) {
                this.car_ids = [] as any;
                for (let item of _data["car_ids"])
                    this.car_ids!.push(item);
            }
        }
    }

    static fromJS(data: any): Body39 {
        data = typeof data === 'object' ? data : {};
        let result = new Body39();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["division_id"] = this.division_id;
        if (Array.isArray(this.car_ids)) {
            data["car_ids"] = [];
            for (let item of this.car_ids)
                data["car_ids"].push(item);
        }
        return data;
    }
}

export interface IBody39 {
    /** Идентификатор division */
    division_id?: number;
    /** Идентификаторы автомобилей */
    car_ids?: number[];

    [key: string]: any;
}

export class Body40 implements IBody40 {
    /** Идентификатор тарифа */
    tariff_id?: number;
    /** Идентификаторы автомобилей */
    car_ids?: number[];

    [key: string]: any;

    constructor(data?: IBody40) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.tariff_id = _data["tariff_id"];
            if (Array.isArray(_data["car_ids"])) {
                this.car_ids = [] as any;
                for (let item of _data["car_ids"])
                    this.car_ids!.push(item);
            }
        }
    }

    static fromJS(data: any): Body40 {
        data = typeof data === 'object' ? data : {};
        let result = new Body40();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["tariff_id"] = this.tariff_id;
        if (Array.isArray(this.car_ids)) {
            data["car_ids"] = [];
            for (let item of this.car_ids)
                data["car_ids"].push(item);
        }
        return data;
    }
}

export interface IBody40 {
    /** Идентификатор тарифа */
    tariff_id?: number;
    /** Идентификаторы автомобилей */
    car_ids?: number[];

    [key: string]: any;
}

export class Body41 implements IBody41 {
    /** Идентификатор */
    id?: number;

    [key: string]: any;

    constructor(data?: IBody41) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Body41 {
        data = typeof data === 'object' ? data : {};
        let result = new Body41();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IBody41 {
    /** Идентификатор */
    id?: number;

    [key: string]: any;
}

export class Body42 implements IBody42 {
    /** Время последнего обновления */
    last_update_time?: any;

    [key: string]: any;

    constructor(data?: IBody42) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.last_update_time = _data["last_update_time"];
        }
    }

    static fromJS(data: any): Body42 {
        data = typeof data === 'object' ? data : {};
        let result = new Body42();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["last_update_time"] = this.last_update_time;
        return data;
    }
}

export interface IBody42 {
    /** Время последнего обновления */
    last_update_time?: any;

    [key: string]: any;
}

export class Body43 implements IBody43 {
    /** id заявки */
    id?: number;
    /** id подразделения */
    division_id?: number | undefined;
    /** источник рекламы */
    advertising_source?: any | undefined;
    /** причина отказа от авто */
    reason_for_rejection?: any | undefined;
    /** Имя пользователя */
    user_name?: any | undefined;
    /** текущий статус */
    current_stage?: ApplicationStage | undefined;

    [key: string]: any;

    constructor(data?: IBody43) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.division_id = _data["division_id"];
            this.advertising_source = _data["advertising_source"];
            this.reason_for_rejection = _data["reason_for_rejection"];
            this.user_name = _data["user_name"];
            this.current_stage = _data["current_stage"];
        }
    }

    static fromJS(data: any): Body43 {
        data = typeof data === 'object' ? data : {};
        let result = new Body43();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["division_id"] = this.division_id;
        data["advertising_source"] = this.advertising_source;
        data["reason_for_rejection"] = this.reason_for_rejection;
        data["user_name"] = this.user_name;
        data["current_stage"] = this.current_stage;
        return data;
    }
}

export interface IBody43 {
    /** id заявки */
    id?: number;
    /** id подразделения */
    division_id?: number | undefined;
    /** источник рекламы */
    advertising_source?: any | undefined;
    /** причина отказа от авто */
    reason_for_rejection?: any | undefined;
    /** Имя пользователя */
    user_name?: any | undefined;
    /** текущий статус */
    current_stage?: ApplicationStage | undefined;

    [key: string]: any;
}

export class Body44 implements IBody44 {
    /** телефон */
    phone?: string | undefined;
    /** id подразделения */
    division_id?: number | undefined;
    /** источник рекламы */
    advertising_source?: any | undefined;
    /** модель авто */
    chosen_model?: any | undefined;
    /** Марка авто */
    chosen_brand?: any | undefined;
    /** страна выдачи прав */
    license_issuing_country?: any | undefined;
    /** номер удостоверения */
    driver_license?: any | undefined;
    /** дата и время когда планирует прийти */
    planned_arrival?: Date | undefined;

    [key: string]: any;

    constructor(data?: IBody44) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.phone = _data["phone"];
            this.division_id = _data["division_id"];
            this.advertising_source = _data["advertising_source"];
            this.chosen_model = _data["chosen_model"];
            this.chosen_brand = _data["chosen_brand"];
            this.license_issuing_country = _data["license_issuing_country"];
            this.driver_license = _data["driver_license"];
            this.planned_arrival = _data["planned_arrival"] ? new Date(_data["planned_arrival"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Body44 {
        data = typeof data === 'object' ? data : {};
        let result = new Body44();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["phone"] = this.phone;
        data["division_id"] = this.division_id;
        data["advertising_source"] = this.advertising_source;
        data["chosen_model"] = this.chosen_model;
        data["chosen_brand"] = this.chosen_brand;
        data["license_issuing_country"] = this.license_issuing_country;
        data["driver_license"] = this.driver_license;
        data["planned_arrival"] = this.planned_arrival ? this.planned_arrival.toISOString() : <any>undefined;
        return data;
    }
}

export interface IBody44 {
    /** телефон */
    phone?: string | undefined;
    /** id подразделения */
    division_id?: number | undefined;
    /** источник рекламы */
    advertising_source?: any | undefined;
    /** модель авто */
    chosen_model?: any | undefined;
    /** Марка авто */
    chosen_brand?: any | undefined;
    /** страна выдачи прав */
    license_issuing_country?: any | undefined;
    /** номер удостоверения */
    driver_license?: any | undefined;
    /** дата и время когда планирует прийти */
    planned_arrival?: Date | undefined;

    [key: string]: any;
}

export class Body45 implements IBody45 {
    /** id заявки */
    id?: number;
    /** время последнего обновления */
    last_update_time?: any;

    [key: string]: any;

    constructor(data?: IBody45) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.last_update_time = _data["last_update_time"];
        }
    }

    static fromJS(data: any): Body45 {
        data = typeof data === 'object' ? data : {};
        let result = new Body45();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["last_update_time"] = this.last_update_time;
        return data;
    }
}

export interface IBody45 {
    /** id заявки */
    id?: number;
    /** время последнего обновления */
    last_update_time?: any;

    [key: string]: any;
}

export class Body46 implements IBody46 {
    result?: any;
    id?: number;

    [key: string]: any;

    constructor(data?: IBody46) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.result = _data["result"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Body46 {
        data = typeof data === 'object' ? data : {};
        let result = new Body46();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["result"] = this.result;
        data["id"] = this.id;
        return data;
    }
}

export interface IBody46 {
    result?: any;
    id?: number;

    [key: string]: any;
}

export class Body47 implements IBody47 {
    message?: any;
    date?: any;
    result?: any;
    id?: number;

    [key: string]: any;

    constructor(data?: IBody47) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.date = _data["date"];
            this.result = _data["result"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Body47 {
        data = typeof data === 'object' ? data : {};
        let result = new Body47();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["date"] = this.date;
        data["result"] = this.result;
        data["id"] = this.id;
        return data;
    }
}

export interface IBody47 {
    message?: any;
    date?: any;
    result?: any;
    id?: number;

    [key: string]: any;
}

export class Anonymous implements IAnonymous {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous {
    message?: string;

    [key: string]: any;
}

export class Anonymous2 implements IAnonymous2 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous2 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous2 {
    message?: string;

    [key: string]: any;
}

export class Anonymous3 implements IAnonymous3 {
    message?: string;
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous3 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous3 {
    message?: string;
    errors?: any;

    [key: string]: any;
}

export class Anonymous4 implements IAnonymous4 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous4 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous4 {
    message?: string;

    [key: string]: any;
}

export class Anonymous5 implements IAnonymous5 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous5 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous5 {
    message?: string;

    [key: string]: any;
}

export class Anonymous6 implements IAnonymous6 {
    message?: string;
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous6 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous6 {
    message?: string;
    errors?: any;

    [key: string]: any;
}

export class Anonymous7 implements IAnonymous7 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous7 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous7 {
    message?: string;

    [key: string]: any;
}

export class Anonymous8 implements IAnonymous8 {
    message?: string;
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Anonymous8 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous8 {
    message?: string;
    id?: number;

    [key: string]: any;
}

export class Anonymous9 implements IAnonymous9 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous9 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous9 {
    message?: string;

    [key: string]: any;
}

export class Anonymous10 implements IAnonymous10 {
    message?: string;
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous10 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous10 {
    message?: string;
    errors?: any;

    [key: string]: any;
}

export class Anonymous11 implements IAnonymous11 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous11 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous11 {
    message?: string;

    [key: string]: any;
}

export class Anonymous12 implements IAnonymous12 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous12 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous12 {
    message?: string;

    [key: string]: any;
}

export class Anonymous13 implements IAnonymous13 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous13 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous13 {
    message?: string;

    [key: string]: any;
}

export class Anonymous14 implements IAnonymous14 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous14 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous14 {
    message?: string;

    [key: string]: any;
}

export class Anonymous15 implements IAnonymous15 {
    message?: string;
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous15) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Anonymous15 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous15();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous15 {
    message?: string;
    id?: number;

    [key: string]: any;
}

export class Anonymous16 implements IAnonymous16 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous16) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous16 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous16();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous16 {
    message?: string;

    [key: string]: any;
}

export class Anonymous17 implements IAnonymous17 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous17) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous17 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous17();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous17 {
    message?: string;

    [key: string]: any;
}

export class Anonymous18 implements IAnonymous18 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous18) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous18 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous18();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous18 {
    message?: string;

    [key: string]: any;
}

export class Anonymous19 implements IAnonymous19 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous19) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous19 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous19();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous19 {
    message?: string;

    [key: string]: any;
}

export class Anonymous20 implements IAnonymous20 {
    message?: string;
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous20) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Anonymous20 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous20();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous20 {
    message?: string;
    id?: number;

    [key: string]: any;
}

export class Anonymous21 implements IAnonymous21 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous21) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous21 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous21();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous21 {
    message?: string;

    [key: string]: any;
}

export class Anonymous22 implements IAnonymous22 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous22) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous22 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous22();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous22 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous23 implements IAnonymous23 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous23) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous23 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous23();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous23 {
    message?: string;

    [key: string]: any;
}

export class Anonymous24 implements IAnonymous24 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous24) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous24 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous24();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous24 {
    message?: string;

    [key: string]: any;
}

export class Anonymous25 implements IAnonymous25 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous25) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous25 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous25();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous25 {
    message?: string;

    [key: string]: any;
}

export class Anonymous26 implements IAnonymous26 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous26) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous26 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous26();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous26 {
    message?: string;

    [key: string]: any;
}

export class Anonymous27 implements IAnonymous27 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous27) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous27 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous27();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous27 {
    message?: string;

    [key: string]: any;
}

export class Anonymous28 implements IAnonymous28 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous28) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous28 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous28();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous28 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous29 implements IAnonymous29 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous29) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous29 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous29();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous29 {
    message?: string;

    [key: string]: any;
}

export class Anonymous30 implements IAnonymous30 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous30) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous30 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous30();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous30 {
    message?: string;

    [key: string]: any;
}

export class Anonymous31 implements IAnonymous31 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous31) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous31 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous31();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous31 {
    message?: string;

    [key: string]: any;
}

export class Anonymous32 implements IAnonymous32 {
    message?: string;
    /** Список ошибок валидации */
    errors?: any | undefined;

    [key: string]: any;

    constructor(data?: IAnonymous32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous32 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous32 {
    message?: string;
    /** Список ошибок валидации */
    errors?: any | undefined;

    [key: string]: any;
}

export class Anonymous33 implements IAnonymous33 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous33) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous33 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous33();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous33 {
    message?: string;

    [key: string]: any;
}

export class Anonymous34 implements IAnonymous34 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous34) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous34 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous34();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous34 {
    message?: string;

    [key: string]: any;
}

export class Anonymous35 implements IAnonymous35 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous35) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous35 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous35();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous35 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous36 implements IAnonymous36 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous36) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous36 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous36();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous36 {
    message?: string;

    [key: string]: any;
}

export class Anonymous37 implements IAnonymous37 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous37) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous37 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous37();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous37 {
    message?: string;

    [key: string]: any;
}

export class Anonymous38 implements IAnonymous38 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous38) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous38 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous38();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous38 {
    message?: string;

    [key: string]: any;
}

export class Anonymous39 implements IAnonymous39 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous39) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous39 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous39();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous39 {
    message?: string;

    [key: string]: any;
}

export class Anonymous40 implements IAnonymous40 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous40) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous40 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous40();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous40 {
    message?: string;

    [key: string]: any;
}

export class Anonymous41 implements IAnonymous41 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous41) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous41 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous41();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous41 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous42 implements IAnonymous42 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous42) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous42 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous42();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous42 {
    message?: string;

    [key: string]: any;
}

export class Anonymous43 implements IAnonymous43 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous43) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous43 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous43();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous43 {
    message?: string;

    [key: string]: any;
}

export class Anonymous44 implements IAnonymous44 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous44) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous44 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous44();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous44 {
    message?: string;

    [key: string]: any;
}

export class Anonymous45 implements IAnonymous45 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous45) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous45 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous45();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous45 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous46 implements IAnonymous46 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous46) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous46 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous46();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous46 {
    message?: string;

    [key: string]: any;
}

export class Anonymous47 implements IAnonymous47 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous47) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous47 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous47();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous47 {
    message?: string;

    [key: string]: any;
}

export class Anonymous48 implements IAnonymous48 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous48) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous48 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous48();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous48 {
    message?: string;

    [key: string]: any;
}

export class Anonymous49 implements IAnonymous49 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous49) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous49 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous49();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous49 {
    message?: string;

    [key: string]: any;
}

export class Anonymous50 implements IAnonymous50 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous50) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous50 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous50();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous50 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous51 implements IAnonymous51 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous51) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous51 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous51();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous51 {
    message?: string;

    [key: string]: any;
}

export class Anonymous52 implements IAnonymous52 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous52) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous52 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous52();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous52 {
    message?: string;

    [key: string]: any;
}

export class Anonymous53 implements IAnonymous53 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous53) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous53 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous53();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous53 {
    message?: string;

    [key: string]: any;
}

export class Anonymous54 implements IAnonymous54 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous54) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous54 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous54();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous54 {
    message?: string;

    [key: string]: any;
}

export class Anonymous55 implements IAnonymous55 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous55) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous55 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous55();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous55 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous56 implements IAnonymous56 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous56) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous56 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous56();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous56 {
    message?: string;

    [key: string]: any;
}

export class Anonymous57 implements IAnonymous57 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous57) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous57 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous57();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous57 {
    message?: string;

    [key: string]: any;
}

export class Anonymous58 implements IAnonymous58 {
    parks?: Parks[];

    [key: string]: any;

    constructor(data?: IAnonymous58) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["parks"])) {
                this.parks = [] as any;
                for (let item of _data["parks"])
                    this.parks!.push(Parks.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous58 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous58();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.parks)) {
            data["parks"] = [];
            for (let item of this.parks)
                data["parks"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous58 {
    parks?: Parks[];

    [key: string]: any;
}

export class Anonymous59 implements IAnonymous59 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous59) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous59 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous59();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous59 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;
}

export class Anonymous60 implements IAnonymous60 {
    parks?: Parks2[];

    [key: string]: any;

    constructor(data?: IAnonymous60) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["parks"])) {
                this.parks = [] as any;
                for (let item of _data["parks"])
                    this.parks!.push(Parks2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous60 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous60();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.parks)) {
            data["parks"] = [];
            for (let item of this.parks)
                data["parks"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous60 {
    parks?: Parks2[];

    [key: string]: any;
}

export class Anonymous61 implements IAnonymous61 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous61) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous61 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous61();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous61 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;
}

export class Anonymous62 implements IAnonymous62 {
    park?: Park[];

    [key: string]: any;

    constructor(data?: IAnonymous62) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["park"])) {
                this.park = [] as any;
                for (let item of _data["park"])
                    this.park!.push(Park.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous62 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous62();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.park)) {
            data["park"] = [];
            for (let item of this.park)
                data["park"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous62 {
    park?: Park[];

    [key: string]: any;
}

export class Anonymous63 implements IAnonymous63 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous63) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous63 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous63();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous63 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;
}

export class Anonymous64 implements IAnonymous64 {
    users?: Users[];

    [key: string]: any;

    constructor(data?: IAnonymous64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(Users.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous64 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous64 {
    users?: Users[];

    [key: string]: any;
}

export class Anonymous65 implements IAnonymous65 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous65) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous65 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous65();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous65 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;
}

export class Anonymous66 implements IAnonymous66 {
    /** Данные пользователя */
    user?: User;

    [key: string]: any;

    constructor(data?: IAnonymous66) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous66 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous66();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAnonymous66 {
    /** Данные пользователя */
    user?: User;

    [key: string]: any;
}

export class Anonymous67 implements IAnonymous67 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous67) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous67 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous67();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous67 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;
}

export class Anonymous68 implements IAnonymous68 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous68) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous68 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous68();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous68 {
    message?: string;

    [key: string]: any;
}

export class Anonymous69 implements IAnonymous69 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous69) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous69 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous69();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous69 {
    message?: string;

    [key: string]: any;
}

export class Anonymous70 implements IAnonymous70 {
    /** Регистрация? */
    register?: boolean;
    /** Токен */
    token?: string;

    [key: string]: any;

    constructor(data?: IAnonymous70) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.register = _data["register"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): Anonymous70 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous70();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["register"] = this.register;
        data["token"] = this.token;
        return data;
    }
}

export interface IAnonymous70 {
    /** Регистрация? */
    register?: boolean;
    /** Токен */
    token?: string;

    [key: string]: any;
}

export class Anonymous71 implements IAnonymous71 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous71) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous71 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous71();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous71 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;
}

export class Anonymous72 implements IAnonymous72 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous72) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous72 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous72();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous72 {
    message?: string;

    [key: string]: any;
}

export class Anonymous73 implements IAnonymous73 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous73) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous73 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous73();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous73 {
    message?: string;

    [key: string]: any;
}

export class Anonymous74 implements IAnonymous74 {
    /** Успешность операции */
    success?: boolean;

    [key: string]: any;

    constructor(data?: IAnonymous74) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
        }
    }

    static fromJS(data: any): Anonymous74 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous74();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        return data;
    }
}

export interface IAnonymous74 {
    /** Успешность операции */
    success?: boolean;

    [key: string]: any;
}

export class Anonymous75 implements IAnonymous75 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous75) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous75 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous75();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous75 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;
}

export class Anonymous76 implements IAnonymous76 {
    cars?: Cars3[];

    [key: string]: any;

    constructor(data?: IAnonymous76) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cars"])) {
                this.cars = [] as any;
                for (let item of _data["cars"])
                    this.cars!.push(Cars3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous76 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous76();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cars)) {
            data["cars"] = [];
            for (let item of this.cars)
                data["cars"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous76 {
    cars?: Cars3[];

    [key: string]: any;
}

export class Anonymous77 implements IAnonymous77 {
    url?: string;

    [key: string]: any;

    constructor(data?: IAnonymous77) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Anonymous77 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous77();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["url"] = this.url;
        return data;
    }
}

export interface IAnonymous77 {
    url?: string;

    [key: string]: any;
}

export class Anonymous78 implements IAnonymous78 {
    error?: string;

    [key: string]: any;

    constructor(data?: IAnonymous78) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): Anonymous78 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous78();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["error"] = this.error;
        return data;
    }
}

export interface IAnonymous78 {
    error?: string;

    [key: string]: any;
}

export class Anonymous79 implements IAnonymous79 {
    booking?: Booking;

    [key: string]: any;

    constructor(data?: IAnonymous79) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.booking = _data["booking"] ? Booking.fromJS(_data["booking"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous79 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous79();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["booking"] = this.booking ? this.booking.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAnonymous79 {
    booking?: Booking;

    [key: string]: any;
}

export class Anonymous80 implements IAnonymous80 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous80) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous80 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous80();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous80 {
    message?: string;

    [key: string]: any;
}

export class Anonymous81 implements IAnonymous81 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous81) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous81 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous81();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous81 {
    message?: string;

    [key: string]: any;
}

export class Anonymous82 implements IAnonymous82 {
    /** Сообщение об успешной отмене бронирования */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous82) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous82 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous82();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous82 {
    /** Сообщение об успешной отмене бронирования */
    message?: string;

    [key: string]: any;
}

export class Anonymous83 implements IAnonymous83 {
    /** Требуется аутентификация для выполнения запроса */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous83) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous83 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous83();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous83 {
    /** Требуется аутентификация для выполнения запроса */
    message?: string;

    [key: string]: any;
}

export class Anonymous84 implements IAnonymous84 {
    /** У вас нет разрешения на выполнение этого действия */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous84) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous84 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous84();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous84 {
    /** У вас нет разрешения на выполнение этого действия */
    message?: string;

    [key: string]: any;
}

export class Anonymous85 implements IAnonymous85 {
    /** Автомобиль с указанным идентификатором не найден */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous85) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous85 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous85();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous85 {
    /** Автомобиль с указанным идентификатором не найден */
    message?: string;

    [key: string]: any;
}

export class Anonymous86 implements IAnonymous86 {
    /** Машина не забронирована */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous86) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous86 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous86();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous86 {
    /** Машина не забронирована */
    message?: string;

    [key: string]: any;
}

export class Anonymous87 implements IAnonymous87 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous87) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous87 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous87();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous87 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;
}

export class Anonymous88 implements IAnonymous88 {
    brands?: Brands[];
    avito_ids?: Avito_ids[];
    parks?: string[];

    [key: string]: any;

    constructor(data?: IAnonymous88) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["brands"])) {
                this.brands = [] as any;
                for (let item of _data["brands"])
                    this.brands!.push(Brands.fromJS(item));
            }
            if (Array.isArray(_data["avito_ids"])) {
                this.avito_ids = [] as any;
                for (let item of _data["avito_ids"])
                    this.avito_ids!.push(Avito_ids.fromJS(item));
            }
            if (Array.isArray(_data["parks"])) {
                this.parks = [] as any;
                for (let item of _data["parks"])
                    this.parks!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous88 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous88();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.brands)) {
            data["brands"] = [];
            for (let item of this.brands)
                data["brands"].push(item.toJSON());
        }
        if (Array.isArray(this.avito_ids)) {
            data["avito_ids"] = [];
            for (let item of this.avito_ids)
                data["avito_ids"].push(item.toJSON());
        }
        if (Array.isArray(this.parks)) {
            data["parks"] = [];
            for (let item of this.parks)
                data["parks"].push(item);
        }
        return data;
    }
}

export interface IAnonymous88 {
    brands?: Brands[];
    avito_ids?: Avito_ids[];
    parks?: string[];

    [key: string]: any;
}

export class Anonymous89 implements IAnonymous89 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous89) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous89 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous89();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous89 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;
}

export class Anonymous90 implements IAnonymous90 {
    /** Результат проверки активной брони (true/false) */
    result?: boolean;

    [key: string]: any;

    constructor(data?: IAnonymous90) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): Anonymous90 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous90();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["result"] = this.result;
        return data;
    }
}

export interface IAnonymous90 {
    /** Результат проверки активной брони (true/false) */
    result?: boolean;

    [key: string]: any;
}

export class Anonymous91 implements IAnonymous91 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous91) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous91 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous91();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous91 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;
}

export class Anonymous92 implements IAnonymous92 {
    park?: Park2[];

    [key: string]: any;

    constructor(data?: IAnonymous92) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["park"])) {
                this.park = [] as any;
                for (let item of _data["park"])
                    this.park!.push(Park2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous92 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous92();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.park)) {
            data["park"] = [];
            for (let item of this.park)
                data["park"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous92 {
    park?: Park2[];

    [key: string]: any;
}

export class Anonymous93 implements IAnonymous93 {
    /** Внутренняя ошибка сервера  */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous93) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous93 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous93();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous93 {
    /** Внутренняя ошибка сервера  */
    message?: string;

    [key: string]: any;
}

export class Anonymous94 implements IAnonymous94 {
    aPI_key?: string;

    [key: string]: any;

    constructor(data?: IAnonymous94) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aPI_key = _data["API_key"];
        }
    }

    static fromJS(data: any): Anonymous94 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous94();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["API_key"] = this.aPI_key;
        return data;
    }
}

export interface IAnonymous94 {
    aPI_key?: string;

    [key: string]: any;
}

export class Anonymous95 implements IAnonymous95 {
    /** Внутренняя ошибка сервера  */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous95) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous95 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous95();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous95 {
    /** Внутренняя ошибка сервера  */
    message?: string;

    [key: string]: any;
}

export class Anonymous96 implements IAnonymous96 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous96) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous96 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous96();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous96 {
    message?: string;

    [key: string]: any;
}

export class Anonymous97 implements IAnonymous97 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous97) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous97 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous97();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous97 {
    message?: string;

    [key: string]: any;
}

export class Anonymous98 implements IAnonymous98 {
    message?: string;
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous98) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous98 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous98();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous98 {
    message?: string;
    errors?: any;

    [key: string]: any;
}

export class Anonymous99 implements IAnonymous99 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous99) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous99 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous99();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous99 {
    message?: string;

    [key: string]: any;
}

export class Anonymous100 implements IAnonymous100 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous100) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous100 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous100();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous100 {
    message?: string;

    [key: string]: any;
}

export class Anonymous101 implements IAnonymous101 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous101) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous101 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous101();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous101 {
    message?: string;

    [key: string]: any;
}

export class Anonymous102 implements IAnonymous102 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous102) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous102 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous102();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous102 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous103 implements IAnonymous103 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous103) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous103 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous103();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous103 {
    message?: string;

    [key: string]: any;
}

export class Anonymous104 implements IAnonymous104 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous104) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous104 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous104();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous104 {
    message?: string;

    [key: string]: any;
}

export class Anonymous105 implements IAnonymous105 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous105) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous105 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous105();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous105 {
    message?: string;

    [key: string]: any;
}

export class Anonymous106 implements IAnonymous106 {
    message?: string;
    /** Список ошибок валидации */
    errors?: any | undefined;

    [key: string]: any;

    constructor(data?: IAnonymous106) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous106 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous106();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous106 {
    message?: string;
    /** Список ошибок валидации */
    errors?: any | undefined;

    [key: string]: any;
}

export class Anonymous107 implements IAnonymous107 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous107) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous107 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous107();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous107 {
    message?: string;

    [key: string]: any;
}

export class Anonymous108 implements IAnonymous108 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous108) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous108 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous108();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous108 {
    message?: string;

    [key: string]: any;
}

export class Anonymous109 implements IAnonymous109 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous109) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous109 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous109();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous109 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous110 implements IAnonymous110 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous110) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous110 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous110();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous110 {
    message?: string;

    [key: string]: any;
}

export class Anonymous111 implements IAnonymous111 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous111) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous111 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous111();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous111 {
    message?: string;

    [key: string]: any;
}

export class Anonymous112 implements IAnonymous112 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous112) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous112 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous112();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous112 {
    message?: string;

    [key: string]: any;
}

export class Anonymous113 implements IAnonymous113 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous113) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous113 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous113();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous113 {
    message?: string;

    [key: string]: any;
}

export class Anonymous114 implements IAnonymous114 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous114) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous114 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous114();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous114 {
    message?: string;

    [key: string]: any;
}

export class Anonymous115 implements IAnonymous115 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous115) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous115 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous115();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous115 {
    message?: string;

    [key: string]: any;
}

export class Anonymous116 implements IAnonymous116 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous116) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous116 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous116();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous116 {
    message?: string;

    [key: string]: any;
}

export class Anonymous117 implements IAnonymous117 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous117) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous117 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous117();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous117 {
    message?: string;

    [key: string]: any;
}

export class Anonymous118 implements IAnonymous118 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous118) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous118 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous118();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous118 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous119 implements IAnonymous119 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous119) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous119 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous119();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous119 {
    message?: string;

    [key: string]: any;
}

export class Anonymous120 implements IAnonymous120 {
    message?: string;
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous120) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Anonymous120 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous120();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous120 {
    message?: string;
    id?: number;

    [key: string]: any;
}

export class Anonymous121 implements IAnonymous121 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous121) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous121 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous121();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous121 {
    message?: string;

    [key: string]: any;
}

export class Anonymous122 implements IAnonymous122 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous122) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous122 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous122();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous122 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous123 implements IAnonymous123 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous123) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous123 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous123();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous123 {
    message?: string;

    [key: string]: any;
}

export class Anonymous124 implements IAnonymous124 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous124) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous124 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous124();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous124 {
    message?: string;

    [key: string]: any;
}

export class Anonymous125 implements IAnonymous125 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous125) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous125 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous125();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous125 {
    message?: string;

    [key: string]: any;
}

export class Anonymous126 implements IAnonymous126 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous126) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous126 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous126();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous126 {
    message?: string;

    [key: string]: any;
}

export class Anonymous127 implements IAnonymous127 {
    message?: string;
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous127) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous127 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous127();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous127 {
    message?: string;
    errors?: any;

    [key: string]: any;
}

export class Anonymous128 implements IAnonymous128 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous128) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous128 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous128();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous128 {
    message?: string;

    [key: string]: any;
}

export class Anonymous129 implements IAnonymous129 {
    message?: string;
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous129) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Anonymous129 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous129();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous129 {
    message?: string;
    id?: number;

    [key: string]: any;
}

export class Anonymous130 implements IAnonymous130 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous130) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous130 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous130();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous130 {
    message?: string;

    [key: string]: any;
}

export class Anonymous131 implements IAnonymous131 {
    message?: string;
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous131) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous131 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous131();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous131 {
    message?: string;
    errors?: any;

    [key: string]: any;
}

export class Anonymous132 implements IAnonymous132 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous132) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous132 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous132();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous132 {
    message?: string;

    [key: string]: any;
}

export class Anonymous133 implements IAnonymous133 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous133) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous133 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous133();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous133 {
    message?: string;

    [key: string]: any;
}

export class Anonymous134 implements IAnonymous134 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous134) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous134 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous134();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous134 {
    message?: string;

    [key: string]: any;
}

export class Anonymous135 implements IAnonymous135 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous135) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous135 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous135();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous135 {
    message?: string;

    [key: string]: any;
}

export class Anonymous136 implements IAnonymous136 {
    message?: string;
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous136) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Anonymous136 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous136();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous136 {
    message?: string;
    id?: number;

    [key: string]: any;
}

export class Anonymous137 implements IAnonymous137 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous137) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous137 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous137();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous137 {
    message?: string;

    [key: string]: any;
}

export class Anonymous138 implements IAnonymous138 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous138) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous138 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous138();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous138 {
    message?: string;

    [key: string]: any;
}

export class Anonymous139 implements IAnonymous139 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous139) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous139 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous139();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous139 {
    message?: string;

    [key: string]: any;
}

export class Anonymous140 implements IAnonymous140 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous140) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous140 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous140();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous140 {
    message?: string;

    [key: string]: any;
}

export class Anonymous141 implements IAnonymous141 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous141) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous141 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous141();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous141 {
    message?: string;

    [key: string]: any;
}

export class Anonymous142 implements IAnonymous142 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous142) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous142 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous142();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous142 {
    message?: string;

    [key: string]: any;
}

export class Anonymous143 implements IAnonymous143 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous143) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous143 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous143();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous143 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous144 implements IAnonymous144 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous144) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous144 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous144();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous144 {
    message?: string;

    [key: string]: any;
}

export class Anonymous145 implements IAnonymous145 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous145) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous145 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous145();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous145 {
    message?: string;

    [key: string]: any;
}

export class Anonymous146 implements IAnonymous146 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous146) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous146 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous146();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous146 {
    message?: string;

    [key: string]: any;
}

export class Anonymous147 implements IAnonymous147 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous147) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous147 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous147();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous147 {
    message?: string;

    [key: string]: any;
}

export class Anonymous148 implements IAnonymous148 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous148) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous148 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous148();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous148 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous149 implements IAnonymous149 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous149) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous149 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous149();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous149 {
    message?: string;

    [key: string]: any;
}

export class Anonymous150 implements IAnonymous150 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous150) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous150 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous150();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous150 {
    message?: string;

    [key: string]: any;
}

export class Anonymous151 implements IAnonymous151 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous151) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous151 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous151();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous151 {
    message?: string;

    [key: string]: any;
}

export class Anonymous152 implements IAnonymous152 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous152) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous152 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous152();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous152 {
    message?: string;

    [key: string]: any;
}

export class Anonymous153 implements IAnonymous153 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous153) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous153 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous153();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous153 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous154 implements IAnonymous154 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous154) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous154 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous154();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous154 {
    message?: string;

    [key: string]: any;
}

export class Anonymous155 implements IAnonymous155 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous155) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous155 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous155();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous155 {
    message?: string;

    [key: string]: any;
}

export class Anonymous156 implements IAnonymous156 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous156) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous156 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous156();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous156 {
    message?: string;

    [key: string]: any;
}

export class Anonymous157 implements IAnonymous157 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous157) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous157 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous157();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous157 {
    message?: string;

    [key: string]: any;
}

export class Anonymous158 implements IAnonymous158 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous158) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous158 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous158();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous158 {
    message?: string;

    [key: string]: any;
}

export class Anonymous159 implements IAnonymous159 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous159) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous159 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous159();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous159 {
    message?: string;

    [key: string]: any;
}

export class Anonymous160 implements IAnonymous160 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous160) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous160 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous160();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous160 {
    message?: string;

    [key: string]: any;
}

export class Anonymous161 implements IAnonymous161 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous161) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous161 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous161();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous161 {
    message?: string;

    [key: string]: any;
}

export class Anonymous162 implements IAnonymous162 {
    statuses?: Statuses[];

    [key: string]: any;

    constructor(data?: IAnonymous162) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["statuses"])) {
                this.statuses = [] as any;
                for (let item of _data["statuses"])
                    this.statuses!.push(Statuses.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous162 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous162();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.statuses)) {
            data["statuses"] = [];
            for (let item of this.statuses)
                data["statuses"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous162 {
    statuses?: Statuses[];

    [key: string]: any;
}

export class Anonymous163 implements IAnonymous163 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous163) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous163 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous163();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous163 {
    message?: string;

    [key: string]: any;
}

export class Anonymous164 implements IAnonymous164 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous164) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous164 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous164();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous164 {
    message?: string;

    [key: string]: any;
}

export class Anonymous165 implements IAnonymous165 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous165) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous165 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous165();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous165 {
    message?: string;

    [key: string]: any;
}

export class Anonymous166 implements IAnonymous166 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous166) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous166 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous166();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous166 {
    message?: string;

    [key: string]: any;
}

export class Anonymous167 implements IAnonymous167 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous167) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous167 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous167();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous167 {
    message?: string;

    [key: string]: any;
}

export class Anonymous168 implements IAnonymous168 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous168) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous168 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous168();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous168 {
    message?: string;

    [key: string]: any;
}

export class Anonymous169 implements IAnonymous169 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous169) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous169 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous169();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous169 {
    message?: string;

    [key: string]: any;
}

export class Anonymous170 implements IAnonymous170 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous170) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous170 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous170();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous170 {
    message?: string;

    [key: string]: any;
}

export class Anonymous171 implements IAnonymous171 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous171) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous171 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous171();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous171 {
    message?: string;

    [key: string]: any;
}

export class Anonymous172 implements IAnonymous172 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous172) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous172 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous172();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous172 {
    message?: string;

    [key: string]: any;
}

export class Anonymous173 implements IAnonymous173 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous173) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous173 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous173();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous173 {
    message?: string;

    [key: string]: any;
}

export class Anonymous174 implements IAnonymous174 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous174) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous174 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous174();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous174 {
    message?: string;

    [key: string]: any;
}

export class Anonymous175 implements IAnonymous175 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous175) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous175 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous175();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous175 {
    message?: string;

    [key: string]: any;
}

export class Anonymous176 implements IAnonymous176 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous176) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous176 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous176();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous176 {
    message?: string;

    [key: string]: any;
}

export class Anonymous177 implements IAnonymous177 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous177) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous177 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous177();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous177 {
    message?: string;

    [key: string]: any;
}

export class Anonymous178 implements IAnonymous178 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous178) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous178 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous178();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous178 {
    message?: string;

    [key: string]: any;
}

export class Anonymous179 implements IAnonymous179 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous179) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous179 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous179();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous179 {
    message?: string;

    [key: string]: any;
}

export class Anonymous180 implements IAnonymous180 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous180) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous180 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous180();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous180 {
    message?: string;

    [key: string]: any;
}

export class Anonymous181 implements IAnonymous181 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous181) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous181 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous181();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous181 {
    message?: string;

    [key: string]: any;
}

export class Anonymous182 implements IAnonymous182 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous182) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous182 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous182();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous182 {
    message?: string;

    [key: string]: any;
}

export class Anonymous183 implements IAnonymous183 {
    bookings?: Bookings[];

    [key: string]: any;

    constructor(data?: IAnonymous183) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["bookings"])) {
                this.bookings = [] as any;
                for (let item of _data["bookings"])
                    this.bookings!.push(Bookings.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous183 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous183();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.bookings)) {
            data["bookings"] = [];
            for (let item of this.bookings)
                data["bookings"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous183 {
    bookings?: Bookings[];

    [key: string]: any;
}

export class Anonymous184 implements IAnonymous184 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous184) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous184 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous184();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous184 {
    message?: string;

    [key: string]: any;
}

export class Anonymous185 implements IAnonymous185 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous185) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous185 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous185();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous185 {
    message?: string;

    [key: string]: any;
}

export class Anonymous186 implements IAnonymous186 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous186) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous186 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous186();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous186 {
    message?: string;

    [key: string]: any;
}

export class Anonymous187 implements IAnonymous187 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous187) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous187 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous187();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous187 {
    message?: string;

    [key: string]: any;
}

export class Anonymous188 implements IAnonymous188 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous188) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous188 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous188();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous188 {
    message?: string;

    [key: string]: any;
}

export class Anonymous189 implements IAnonymous189 {
    applications?: Applications[];

    [key: string]: any;

    constructor(data?: IAnonymous189) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["applications"])) {
                this.applications = [] as any;
                for (let item of _data["applications"])
                    this.applications!.push(Applications.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous189 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous189();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.applications)) {
            data["applications"] = [];
            for (let item of this.applications)
                data["applications"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous189 {
    applications?: Applications[];

    [key: string]: any;
}

export class Anonymous190 implements IAnonymous190 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous190) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous190 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous190();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous190 {
    message?: string;

    [key: string]: any;
}

export class Anonymous191 implements IAnonymous191 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous191) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous191 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous191();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous191 {
    message?: string;

    [key: string]: any;
}

export class Anonymous192 implements IAnonymous192 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous192) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous192 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous192();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous192 {
    message?: string;

    [key: string]: any;
}

export class Anonymous193 implements IAnonymous193 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous193) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous193 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous193();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous193 {
    message?: string;

    [key: string]: any;
}

export class Anonymous194 implements IAnonymous194 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous194) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous194 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous194();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous194 {
    message?: string;

    [key: string]: any;
}

export class Anonymous195 implements IAnonymous195 {
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous195) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Anonymous195 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous195();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous195 {
    id?: number;

    [key: string]: any;
}

export class Anonymous196 implements IAnonymous196 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous196) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous196 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous196();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous196 {
    message?: string;

    [key: string]: any;
}

export class Anonymous197 implements IAnonymous197 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous197) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous197 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous197();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous197 {
    message?: string;

    [key: string]: any;
}

export class Anonymous198 implements IAnonymous198 {
    logs?: Logs[];

    [key: string]: any;

    constructor(data?: IAnonymous198) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["logs"])) {
                this.logs = [] as any;
                for (let item of _data["logs"])
                    this.logs!.push(Logs.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous198 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous198();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.logs)) {
            data["logs"] = [];
            for (let item of this.logs)
                data["logs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous198 {
    logs?: Logs[];

    [key: string]: any;
}

export class Anonymous199 implements IAnonymous199 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous199) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous199 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous199();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous199 {
    message?: string;

    [key: string]: any;
}

export class Anonymous200 implements IAnonymous200 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous200) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous200 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous200();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous200 {
    message?: string;

    [key: string]: any;
}

export class Anonymous201 implements IAnonymous201 {
    notifications?: Notifications[];

    [key: string]: any;

    constructor(data?: IAnonymous201) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["notifications"])) {
                this.notifications = [] as any;
                for (let item of _data["notifications"])
                    this.notifications!.push(Notifications.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous201 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous201();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.notifications)) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous201 {
    notifications?: Notifications[];

    [key: string]: any;
}

export class Anonymous202 implements IAnonymous202 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous202) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous202 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous202();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous202 {
    message?: string;

    [key: string]: any;
}

export class Anonymous203 implements IAnonymous203 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous203) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous203 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous203();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous203 {
    message?: string;

    [key: string]: any;
}

export class Anonymous204 implements IAnonymous204 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous204) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous204 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous204();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous204 {
    message?: string;

    [key: string]: any;
}

export class Anonymous205 implements IAnonymous205 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous205) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous205 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous205();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous205 {
    message?: string;

    [key: string]: any;
}

export class Anonymous206 implements IAnonymous206 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous206) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous206 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous206();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous206 {
    message?: string;

    [key: string]: any;
}

export class Anonymous207 implements IAnonymous207 {
    message?: string;
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous207) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Anonymous207 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous207();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous207 {
    message?: string;
    id?: number;

    [key: string]: any;
}

export class Anonymous208 implements IAnonymous208 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous208) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous208 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous208();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous208 {
    message?: string;

    [key: string]: any;
}

export class Anonymous209 implements IAnonymous209 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous209) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous209 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous209();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous209 {
    message?: string;

    [key: string]: any;
}

export class Working_hours implements IWorking_hours {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start;
    /** Время окончания работы */
    end?: End;

    [key: string]: any;

    constructor(data?: IWorking_hours) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.day = _data["day"];
            this.start = _data["start"] ? Start.fromJS(_data["start"]) : <any>undefined;
            this.end = _data["end"] ? End.fromJS(_data["end"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Working_hours {
        data = typeof data === 'object' ? data : {};
        let result = new Working_hours();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["day"] = this.day;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorking_hours {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start;
    /** Время окончания работы */
    end?: End;

    [key: string]: any;
}

export class Working_hours2 implements IWorking_hours2 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start2;
    /** Время окончания работы */
    end?: End2;

    [key: string]: any;

    constructor(data?: IWorking_hours2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.day = _data["day"];
            this.start = _data["start"] ? Start2.fromJS(_data["start"]) : <any>undefined;
            this.end = _data["end"] ? End2.fromJS(_data["end"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Working_hours2 {
        data = typeof data === 'object' ? data : {};
        let result = new Working_hours2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["day"] = this.day;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorking_hours2 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start2;
    /** Время окончания работы */
    end?: End2;

    [key: string]: any;
}

export class Schemas implements ISchemas {
    /** Стоимость аренды авто */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchemas) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schemas {
        data = typeof data === 'object' ? data : {};
        let result = new Schemas();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchemas {
    /** Стоимость аренды авто */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;
}

export class Cars implements ICars {
    /** VIN-номер автомобиля */
    id?: string;
    /** id подразделения */
    division_id?: number;
    /** Вид топлива (1 - метан, 2 - пропан, 0 - бензин, 3 - электро) */
    fuel_type?: number;
    /** КПП ТС (1 - автомат, 0 - механика) */
    transmission_type?: number;
    /** Бренд автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Пробег автомобиля */
    mileage?: number;
    /** Госномер автомобиля */
    license_plate?: string;
    /** Тариф автомобиля (1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: number;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** Ссылки на фотографии автомобиля */
    images?: string[];

    [key: string]: any;

    constructor(data?: ICars) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.division_id = _data["division_id"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.mileage = _data["mileage"];
            this.license_plate = _data["license_plate"];
            this.class = _data["class"];
            this.year_produced = _data["year_produced"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
        }
    }

    static fromJS(data: any): Cars {
        data = typeof data === 'object' ? data : {};
        let result = new Cars();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["division_id"] = this.division_id;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["mileage"] = this.mileage;
        data["license_plate"] = this.license_plate;
        data["class"] = this.class;
        data["year_produced"] = this.year_produced;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        return data;
    }
}

export interface ICars {
    /** VIN-номер автомобиля */
    id?: string;
    /** id подразделения */
    division_id?: number;
    /** Вид топлива (1 - метан, 2 - пропан, 0 - бензин, 3 - электро) */
    fuel_type?: number;
    /** КПП ТС (1 - автомат, 0 - механика) */
    transmission_type?: number;
    /** Бренд автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Пробег автомобиля */
    mileage?: number;
    /** Госномер автомобиля */
    license_plate?: string;
    /** Тариф автомобиля (1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: number;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** Ссылки на фотографии автомобиля */
    images?: string[];

    [key: string]: any;
}

export class Schema implements ISchema {
    /** Суточная стоимость */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schema {
        data = typeof data === 'object' ? data : {};
        let result = new Schema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchema {
    /** Суточная стоимость */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;
}

export class Schemas2 implements ISchemas2 {
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchemas2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schemas2 {
        data = typeof data === 'object' ? data : {};
        let result = new Schemas2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchemas2 {
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;
}

export class Cars2 implements ICars2 {
    /** VIN-номер автомобиля */
    id?: string;
    /** id подразделения */
    division_id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Бренд автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Пробег автомобиля */
    mileage?: number;
    /** Госномер автомобиля */
    license_plate?: string;
    car_class?: CarClass;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** Ссылки на фотографии автомобиля */
    images?: string[];

    [key: string]: any;

    constructor(data?: ICars2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.division_id = _data["division_id"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.mileage = _data["mileage"];
            this.license_plate = _data["license_plate"];
            this.car_class = _data["car_class"];
            this.year_produced = _data["year_produced"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
        }
    }

    static fromJS(data: any): Cars2 {
        data = typeof data === 'object' ? data : {};
        let result = new Cars2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["division_id"] = this.division_id;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["mileage"] = this.mileage;
        data["license_plate"] = this.license_plate;
        data["car_class"] = this.car_class;
        data["year_produced"] = this.year_produced;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        return data;
    }
}

export interface ICars2 {
    /** VIN-номер автомобиля */
    id?: string;
    /** id подразделения */
    division_id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Бренд автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Пробег автомобиля */
    mileage?: number;
    /** Госномер автомобиля */
    license_plate?: string;
    car_class?: CarClass;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** Ссылки на фотографии автомобиля */
    images?: string[];

    [key: string]: any;
}

export class Schemas3 implements ISchemas3 {
    /** Стоимость аренды авто */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchemas3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schemas3 {
        data = typeof data === 'object' ? data : {};
        let result = new Schemas3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchemas3 {
    /** Стоимость аренды авто */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;
}

export class Working_hours3 implements IWorking_hours3 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start3;
    /** Время окончания работы */
    end?: End3;

    [key: string]: any;

    constructor(data?: IWorking_hours3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.day = _data["day"];
            this.start = _data["start"] ? Start3.fromJS(_data["start"]) : <any>undefined;
            this.end = _data["end"] ? End3.fromJS(_data["end"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Working_hours3 {
        data = typeof data === 'object' ? data : {};
        let result = new Working_hours3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["day"] = this.day;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorking_hours3 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start3;
    /** Время окончания работы */
    end?: End3;

    [key: string]: any;
}

export class Working_hours4 implements IWorking_hours4 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start4;
    /** Время окончания работы */
    end?: End4;

    [key: string]: any;

    constructor(data?: IWorking_hours4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.day = _data["day"];
            this.start = _data["start"] ? Start4.fromJS(_data["start"]) : <any>undefined;
            this.end = _data["end"] ? End4.fromJS(_data["end"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Working_hours4 {
        data = typeof data === 'object' ? data : {};
        let result = new Working_hours4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["day"] = this.day;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorking_hours4 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start4;
    /** Время окончания работы */
    end?: End4;

    [key: string]: any;
}

export class Parks implements IParks {
    /** id парка */
    id?: number;
    /** Название парка */
    park_name?: string;

    [key: string]: any;

    constructor(data?: IParks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.park_name = _data["park_name"];
        }
    }

    static fromJS(data: any): Parks {
        data = typeof data === 'object' ? data : {};
        let result = new Parks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["park_name"] = this.park_name;
        return data;
    }
}

export interface IParks {
    /** id парка */
    id?: number;
    /** Название парка */
    park_name?: string;

    [key: string]: any;
}

/** Список отделений в парке */
export class Parks2 implements IParks2 {
    /** Endpoint парка для ответа */
    url?: string;
    /** Комиссия парка */
    commission?: number;
    /** Время брони парка */
    booking_window?: number;
    /** Название парка */
    park_name?: string;
    /** Описание парка */
    about?: string;
    /** Дата создания парка */
    created_at?: string;
    /** Последнее обновление инфо парка */
    updated_at?: string;
    /** Скидка парка для самозанятых */
    self_employed_discount?: number;
    divisions?: Divisions[];

    [key: string]: any;

    constructor(data?: IParks2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.url = _data["url"];
            this.commission = _data["commission"];
            this.booking_window = _data["booking_window"];
            this.park_name = _data["park_name"];
            this.about = _data["about"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.self_employed_discount = _data["self_employed_discount"];
            if (Array.isArray(_data["divisions"])) {
                this.divisions = [] as any;
                for (let item of _data["divisions"])
                    this.divisions!.push(Divisions.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Parks2 {
        data = typeof data === 'object' ? data : {};
        let result = new Parks2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["url"] = this.url;
        data["commission"] = this.commission;
        data["booking_window"] = this.booking_window;
        data["park_name"] = this.park_name;
        data["about"] = this.about;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["self_employed_discount"] = this.self_employed_discount;
        if (Array.isArray(this.divisions)) {
            data["divisions"] = [];
            for (let item of this.divisions)
                data["divisions"].push(item.toJSON());
        }
        return data;
    }
}

/** Список отделений в парке */
export interface IParks2 {
    /** Endpoint парка для ответа */
    url?: string;
    /** Комиссия парка */
    commission?: number;
    /** Время брони парка */
    booking_window?: number;
    /** Название парка */
    park_name?: string;
    /** Описание парка */
    about?: string;
    /** Дата создания парка */
    created_at?: string;
    /** Последнее обновление инфо парка */
    updated_at?: string;
    /** Скидка парка для самозанятых */
    self_employed_discount?: number;
    divisions?: Divisions[];

    [key: string]: any;
}

export class Park implements IPark {
    /** id парка */
    id?: number;
    /** Название парка */
    park_name?: string;

    [key: string]: any;

    constructor(data?: IPark) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.park_name = _data["park_name"];
        }
    }

    static fromJS(data: any): Park {
        data = typeof data === 'object' ? data : {};
        let result = new Park();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["park_name"] = this.park_name;
        return data;
    }
}

export interface IPark {
    /** id парка */
    id?: number;
    /** Название парка */
    park_name?: string;

    [key: string]: any;
}

export class Users implements IUsers {
    /** User ID */
    id?: number;
    user_status?: UserStatus;
    /** Phone number of the user */
    phone?: string;
    /** Name of the user */
    name?: string;
    /** Email of the user */
    email?: string;
    /** Timestamp of email verification */
    email_verified_at?: string;
    /** Timestamp of user creation */
    created_at?: string;
    /** Timestamp of last user update */
    updated_at?: string;
    user_type?: UserType;

    [key: string]: any;

    constructor(data?: IUsers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.user_status = _data["user_status"];
            this.phone = _data["phone"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.email_verified_at = _data["email_verified_at"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.user_type = _data["user_type"];
        }
    }

    static fromJS(data: any): Users {
        data = typeof data === 'object' ? data : {};
        let result = new Users();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["user_status"] = this.user_status;
        data["phone"] = this.phone;
        data["name"] = this.name;
        data["email"] = this.email;
        data["email_verified_at"] = this.email_verified_at;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["user_type"] = this.user_type;
        return data;
    }
}

export interface IUsers {
    /** User ID */
    id?: number;
    user_status?: UserStatus;
    /** Phone number of the user */
    phone?: string;
    /** Name of the user */
    name?: string;
    /** Email of the user */
    email?: string;
    /** Timestamp of email verification */
    email_verified_at?: string;
    /** Timestamp of user creation */
    created_at?: string;
    /** Timestamp of last user update */
    updated_at?: string;
    user_type?: UserType;

    [key: string]: any;
}

export class User implements IUser {
    /** Статус пользователя */
    user_status?: string;
    /** id пользователя */
    id?: number;
    /** Номер телефона пользователя */
    phone?: string;
    /** Имя пользователя */
    name?: string | undefined;
    /** Email пользователя */
    email?: string | undefined;
    /** Тип пользователя */
    user_type?: string;
    /** Название города */
    city_name?: string;
    /** Данные по реферральной программе */
    referral_info?: Referral_info;
    /** Данные документов водителя */
    docs?: Docs[];
    /** Список бронирований */
    bookings?: Bookings2[];

    [key: string]: any;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.user_status = _data["user_status"];
            this.id = _data["id"];
            this.phone = _data["phone"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.user_type = _data["user_type"];
            this.city_name = _data["city_name"];
            this.referral_info = _data["referral_info"] ? Referral_info.fromJS(_data["referral_info"]) : <any>undefined;
            if (Array.isArray(_data["docs"])) {
                this.docs = [] as any;
                for (let item of _data["docs"])
                    this.docs!.push(Docs.fromJS(item));
            }
            if (Array.isArray(_data["bookings"])) {
                this.bookings = [] as any;
                for (let item of _data["bookings"])
                    this.bookings!.push(Bookings2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["user_status"] = this.user_status;
        data["id"] = this.id;
        data["phone"] = this.phone;
        data["name"] = this.name;
        data["email"] = this.email;
        data["user_type"] = this.user_type;
        data["city_name"] = this.city_name;
        data["referral_info"] = this.referral_info ? this.referral_info.toJSON() : <any>undefined;
        if (Array.isArray(this.docs)) {
            data["docs"] = [];
            for (let item of this.docs)
                data["docs"].push(item.toJSON());
        }
        if (Array.isArray(this.bookings)) {
            data["bookings"] = [];
            for (let item of this.bookings)
                data["bookings"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUser {
    /** Статус пользователя */
    user_status?: string;
    /** id пользователя */
    id?: number;
    /** Номер телефона пользователя */
    phone?: string;
    /** Имя пользователя */
    name?: string | undefined;
    /** Email пользователя */
    email?: string | undefined;
    /** Тип пользователя */
    user_type?: string;
    /** Название города */
    city_name?: string;
    /** Данные по реферральной программе */
    referral_info?: Referral_info;
    /** Данные документов водителя */
    docs?: Docs[];
    /** Список бронирований */
    bookings?: Bookings2[];

    [key: string]: any;
}

export class Cars3 implements ICars3 {
    /** Идентификатор автомобиля */
    id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Марка автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Пробег автомобиля */
    mileage?: string;
    /** Комиссия парка */
    commission?: number;
    /** VIN автомобиля */
    vin?: string;
    /** Год производства */
    year_produced?: number;
    /** Ссылки на изображения */
    images?: string[];
    сar_class?: CarClass;
    /** Название парка */
    park_name?: string;
    /** Количество одинаковых */
    cars_count?: number;
    /** Расписание работы парка */
    working_hours?: Working_hours5[];
    /** Описание парка */
    about?: string;
    city?: string;
    /** Данные о подразделении */
    division?: Division;
    /** Данные о сроке аренды */
    rent_term?: Rent_term;

    [key: string]: any;

    constructor(data?: ICars3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.mileage = _data["mileage"];
            this.commission = _data["commission"];
            this.vin = _data["vin"];
            this.year_produced = _data["year_produced"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            this.сar_class = _data["сar_class"];
            this.park_name = _data["park_name"];
            this.cars_count = _data["cars_count"];
            if (Array.isArray(_data["working_hours"])) {
                this.working_hours = [] as any;
                for (let item of _data["working_hours"])
                    this.working_hours!.push(Working_hours5.fromJS(item));
            }
            this.about = _data["about"];
            this.city = _data["city"];
            this.division = _data["division"] ? Division.fromJS(_data["division"]) : <any>undefined;
            this.rent_term = _data["rent_term"] ? Rent_term.fromJS(_data["rent_term"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Cars3 {
        data = typeof data === 'object' ? data : {};
        let result = new Cars3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["mileage"] = this.mileage;
        data["commission"] = this.commission;
        data["vin"] = this.vin;
        data["year_produced"] = this.year_produced;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        data["сar_class"] = this.сar_class;
        data["park_name"] = this.park_name;
        data["cars_count"] = this.cars_count;
        if (Array.isArray(this.working_hours)) {
            data["working_hours"] = [];
            for (let item of this.working_hours)
                data["working_hours"].push(item.toJSON());
        }
        data["about"] = this.about;
        data["city"] = this.city;
        data["division"] = this.division ? this.division.toJSON() : <any>undefined;
        data["rent_term"] = this.rent_term ? this.rent_term.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICars3 {
    /** Идентификатор автомобиля */
    id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Марка автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Пробег автомобиля */
    mileage?: string;
    /** Комиссия парка */
    commission?: number;
    /** VIN автомобиля */
    vin?: string;
    /** Год производства */
    year_produced?: number;
    /** Ссылки на изображения */
    images?: string[];
    сar_class?: CarClass;
    /** Название парка */
    park_name?: string;
    /** Количество одинаковых */
    cars_count?: number;
    /** Расписание работы парка */
    working_hours?: Working_hours5[];
    /** Описание парка */
    about?: string;
    city?: string;
    /** Данные о подразделении */
    division?: Division;
    /** Данные о сроке аренды */
    rent_term?: Rent_term;

    [key: string]: any;
}

export class Booking implements IBooking {
    status?: BookingStatus;
    id?: number;
    start_date?: string;
    end_date?: string;
    car?: Car;
    rent_term?: Rent_term2;

    [key: string]: any;

    constructor(data?: IBooking) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.id = _data["id"];
            this.start_date = _data["start_date"];
            this.end_date = _data["end_date"];
            this.car = _data["car"] ? Car.fromJS(_data["car"]) : <any>undefined;
            this.rent_term = _data["rent_term"] ? Rent_term2.fromJS(_data["rent_term"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Booking {
        data = typeof data === 'object' ? data : {};
        let result = new Booking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["id"] = this.id;
        data["start_date"] = this.start_date;
        data["end_date"] = this.end_date;
        data["car"] = this.car ? this.car.toJSON() : <any>undefined;
        data["rent_term"] = this.rent_term ? this.rent_term.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBooking {
    status?: BookingStatus;
    id?: number;
    start_date?: string;
    end_date?: string;
    car?: Car;
    rent_term?: Rent_term2;

    [key: string]: any;
}

export class Brands implements IBrands {
    name?: string;
    models?: string[];

    [key: string]: any;

    constructor(data?: IBrands) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            if (Array.isArray(_data["models"])) {
                this.models = [] as any;
                for (let item of _data["models"])
                    this.models!.push(item);
            }
        }
    }

    static fromJS(data: any): Brands {
        data = typeof data === 'object' ? data : {};
        let result = new Brands();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        if (Array.isArray(this.models)) {
            data["models"] = [];
            for (let item of this.models)
                data["models"].push(item);
        }
        return data;
    }
}

export interface IBrands {
    name?: string;
    models?: string[];

    [key: string]: any;
}

export class Avito_ids implements IAvito_ids {
    park?: string;
    avito_id?: string;

    [key: string]: any;

    constructor(data?: IAvito_ids) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.park = _data["park"];
            this.avito_id = _data["avito_id"];
        }
    }

    static fromJS(data: any): Avito_ids {
        data = typeof data === 'object' ? data : {};
        let result = new Avito_ids();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["park"] = this.park;
        data["avito_id"] = this.avito_id;
        return data;
    }
}

export interface IAvito_ids {
    park?: string;
    avito_id?: string;

    [key: string]: any;
}

export class Park2 implements IPark2 {
    /** Endpoint парка для ответа */
    url?: string;
    /** Комиссия парка */
    commission?: number;
    /** ключ */
    api_key?: string;
    /** Время брони парка */
    booking_window?: number;
    /** Название парка */
    park_name?: string;
    /** Описание парка */
    about?: string;
    /** id avito */
    avito_id?: string;
    /** Дата создания парка */
    created_at?: string;
    /** Последнее обновление инфо парка */
    updated_at?: string;
    /** Скидка парка для самозанятых */
    self_employed_discount?: number;
    /** Список автомобилей в отделении */
    cars?: Cars4[];
    divisions?: Divisions2[];
    /** Список тарифов аренды */
    rent_terms?: Rent_terms[];
    /** Список тарифов */
    tariffs?: Tariffs[];

    [key: string]: any;

    constructor(data?: IPark2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.url = _data["url"];
            this.commission = _data["commission"];
            this.api_key = _data["api_key"];
            this.booking_window = _data["booking_window"];
            this.park_name = _data["park_name"];
            this.about = _data["about"];
            this.avito_id = _data["avito_id"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.self_employed_discount = _data["self_employed_discount"];
            if (Array.isArray(_data["cars"])) {
                this.cars = [] as any;
                for (let item of _data["cars"])
                    this.cars!.push(Cars4.fromJS(item));
            }
            if (Array.isArray(_data["divisions"])) {
                this.divisions = [] as any;
                for (let item of _data["divisions"])
                    this.divisions!.push(Divisions2.fromJS(item));
            }
            if (Array.isArray(_data["rent_terms"])) {
                this.rent_terms = [] as any;
                for (let item of _data["rent_terms"])
                    this.rent_terms!.push(Rent_terms.fromJS(item));
            }
            if (Array.isArray(_data["tariffs"])) {
                this.tariffs = [] as any;
                for (let item of _data["tariffs"])
                    this.tariffs!.push(Tariffs.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Park2 {
        data = typeof data === 'object' ? data : {};
        let result = new Park2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["url"] = this.url;
        data["commission"] = this.commission;
        data["api_key"] = this.api_key;
        data["booking_window"] = this.booking_window;
        data["park_name"] = this.park_name;
        data["about"] = this.about;
        data["avito_id"] = this.avito_id;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["self_employed_discount"] = this.self_employed_discount;
        if (Array.isArray(this.cars)) {
            data["cars"] = [];
            for (let item of this.cars)
                data["cars"].push(item.toJSON());
        }
        if (Array.isArray(this.divisions)) {
            data["divisions"] = [];
            for (let item of this.divisions)
                data["divisions"].push(item.toJSON());
        }
        if (Array.isArray(this.rent_terms)) {
            data["rent_terms"] = [];
            for (let item of this.rent_terms)
                data["rent_terms"].push(item.toJSON());
        }
        if (Array.isArray(this.tariffs)) {
            data["tariffs"] = [];
            for (let item of this.tariffs)
                data["tariffs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPark2 {
    /** Endpoint парка для ответа */
    url?: string;
    /** Комиссия парка */
    commission?: number;
    /** ключ */
    api_key?: string;
    /** Время брони парка */
    booking_window?: number;
    /** Название парка */
    park_name?: string;
    /** Описание парка */
    about?: string;
    /** id avito */
    avito_id?: string;
    /** Дата создания парка */
    created_at?: string;
    /** Последнее обновление инфо парка */
    updated_at?: string;
    /** Скидка парка для самозанятых */
    self_employed_discount?: number;
    /** Список автомобилей в отделении */
    cars?: Cars4[];
    divisions?: Divisions2[];
    /** Список тарифов аренды */
    rent_terms?: Rent_terms[];
    /** Список тарифов */
    tariffs?: Tariffs[];

    [key: string]: any;
}

export class Statuses implements IStatuses {
    id?: number;
    status_name?: CarStatus;
    custom_status_name?: string;

    [key: string]: any;

    constructor(data?: IStatuses) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.status_name = _data["status_name"];
            this.custom_status_name = _data["custom_status_name"];
        }
    }

    static fromJS(data: any): Statuses {
        data = typeof data === 'object' ? data : {};
        let result = new Statuses();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["status_name"] = this.status_name;
        data["custom_status_name"] = this.custom_status_name;
        return data;
    }
}

export interface IStatuses {
    id?: number;
    status_name?: CarStatus;
    custom_status_name?: string;

    [key: string]: any;
}

export class Bookings implements IBookings {
    id?: number;
    status?: BookingStatus;
    schema_id?: number;
    car_id?: number;
    driver_id?: number;
    booked_at?: string;
    end_date?: string;
    park_id?: number;
    cancellation_source?: CancellationSources;
    cancellation_reason?: string;
    created_at?: string;
    updated_at?: string;
    car?: Car2;
    driver?: Driver;
    schema?: Schema2;

    [key: string]: any;

    constructor(data?: IBookings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.status = _data["status"];
            this.schema_id = _data["schema_id"];
            this.car_id = _data["car_id"];
            this.driver_id = _data["driver_id"];
            this.booked_at = _data["booked_at"];
            this.end_date = _data["end_date"];
            this.park_id = _data["park_id"];
            this.cancellation_source = _data["cancellation_source"];
            this.cancellation_reason = _data["cancellation_reason"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.car = _data["car"] ? Car2.fromJS(_data["car"]) : <any>undefined;
            this.driver = _data["driver"] ? Driver.fromJS(_data["driver"]) : <any>undefined;
            this.schema = _data["schema"] ? Schema2.fromJS(_data["schema"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Bookings {
        data = typeof data === 'object' ? data : {};
        let result = new Bookings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["status"] = this.status;
        data["schema_id"] = this.schema_id;
        data["car_id"] = this.car_id;
        data["driver_id"] = this.driver_id;
        data["booked_at"] = this.booked_at;
        data["end_date"] = this.end_date;
        data["park_id"] = this.park_id;
        data["cancellation_source"] = this.cancellation_source;
        data["cancellation_reason"] = this.cancellation_reason;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["car"] = this.car ? this.car.toJSON() : <any>undefined;
        data["driver"] = this.driver ? this.driver.toJSON() : <any>undefined;
        data["schema"] = this.schema ? this.schema.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBookings {
    id?: number;
    status?: BookingStatus;
    schema_id?: number;
    car_id?: number;
    driver_id?: number;
    booked_at?: string;
    end_date?: string;
    park_id?: number;
    cancellation_source?: CancellationSources;
    cancellation_reason?: string;
    created_at?: string;
    updated_at?: string;
    car?: Car2;
    driver?: Driver;
    schema?: Schema2;

    [key: string]: any;
}

export class Applications implements IApplications {
    id?: number;
    manager_id?: number;
    division_id?: number;
    advertising_source?: string;
    booking_id?: number | undefined;
    planned_arrival?: string;
    driver_license?: string;
    license_issuing_country?: string;
    chosen_model?: string;
    chosen_brand?: string;
    reason_for_rejection?: string | undefined;
    current_stage?: ApplicationStage;
    user_id?: number | undefined;
    created_at?: string;
    updated_at?: string;
    user?: User2;
    booking?: Booking2 | undefined;
    division?: Division2;

    [key: string]: any;

    constructor(data?: IApplications) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.manager_id = _data["manager_id"];
            this.division_id = _data["division_id"];
            this.advertising_source = _data["advertising_source"];
            this.booking_id = _data["booking_id"];
            this.planned_arrival = _data["planned_arrival"];
            this.driver_license = _data["driver_license"];
            this.license_issuing_country = _data["license_issuing_country"];
            this.chosen_model = _data["chosen_model"];
            this.chosen_brand = _data["chosen_brand"];
            this.reason_for_rejection = _data["reason_for_rejection"];
            this.current_stage = _data["current_stage"];
            this.user_id = _data["user_id"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.user = _data["user"] ? User2.fromJS(_data["user"]) : <any>undefined;
            this.booking = _data["booking"] ? Booking2.fromJS(_data["booking"]) : <any>undefined;
            this.division = _data["division"] ? Division2.fromJS(_data["division"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Applications {
        data = typeof data === 'object' ? data : {};
        let result = new Applications();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["manager_id"] = this.manager_id;
        data["division_id"] = this.division_id;
        data["advertising_source"] = this.advertising_source;
        data["booking_id"] = this.booking_id;
        data["planned_arrival"] = this.planned_arrival;
        data["driver_license"] = this.driver_license;
        data["license_issuing_country"] = this.license_issuing_country;
        data["chosen_model"] = this.chosen_model;
        data["chosen_brand"] = this.chosen_brand;
        data["reason_for_rejection"] = this.reason_for_rejection;
        data["current_stage"] = this.current_stage;
        data["user_id"] = this.user_id;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["booking"] = this.booking ? this.booking.toJSON() : <any>undefined;
        data["division"] = this.division ? this.division.toJSON() : <any>undefined;
        return data;
    }
}

export interface IApplications {
    id?: number;
    manager_id?: number;
    division_id?: number;
    advertising_source?: string;
    booking_id?: number | undefined;
    planned_arrival?: string;
    driver_license?: string;
    license_issuing_country?: string;
    chosen_model?: string;
    chosen_brand?: string;
    reason_for_rejection?: string | undefined;
    current_stage?: ApplicationStage;
    user_id?: number | undefined;
    created_at?: string;
    updated_at?: string;
    user?: User2;
    booking?: Booking2 | undefined;
    division?: Division2;

    [key: string]: any;
}

export class Logs implements ILogs {
    id?: number;
    manager_id?: number;
    application_id?: number;
    type?: string;
    content?: any;
    created_at?: string;
    updated_at?: string;
    application?: Application;
    manager?: Manager;

    [key: string]: any;

    constructor(data?: ILogs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.manager_id = _data["manager_id"];
            this.application_id = _data["application_id"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.application = _data["application"] ? Application.fromJS(_data["application"]) : <any>undefined;
            this.manager = _data["manager"] ? Manager.fromJS(_data["manager"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Logs {
        data = typeof data === 'object' ? data : {};
        let result = new Logs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["manager_id"] = this.manager_id;
        data["application_id"] = this.application_id;
        data["type"] = this.type;
        data["content"] = this.content;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        data["manager"] = this.manager ? this.manager.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILogs {
    id?: number;
    manager_id?: number;
    application_id?: number;
    type?: string;
    content?: any;
    created_at?: string;
    updated_at?: string;
    application?: Application;
    manager?: Manager;

    [key: string]: any;
}

export class Notifications implements INotifications {
    id?: number;
    application_id?: number;
    content?: string;
    created_at?: string;

    [key: string]: any;

    constructor(data?: INotifications) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.application_id = _data["application_id"];
            this.content = _data["content"];
            this.created_at = _data["created_at"];
        }
    }

    static fromJS(data: any): Notifications {
        data = typeof data === 'object' ? data : {};
        let result = new Notifications();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["application_id"] = this.application_id;
        data["content"] = this.content;
        data["created_at"] = this.created_at;
        return data;
    }
}

export interface INotifications {
    id?: number;
    application_id?: number;
    content?: string;
    created_at?: string;

    [key: string]: any;
}

export class Start implements IStart {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IStart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): Start {
        data = typeof data === 'object' ? data : {};
        let result = new Start();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IStart {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class End implements IEnd {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IEnd) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): End {
        data = typeof data === 'object' ? data : {};
        let result = new End();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IEnd {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class Start2 implements IStart2 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IStart2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): Start2 {
        data = typeof data === 'object' ? data : {};
        let result = new Start2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IStart2 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class End2 implements IEnd2 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IEnd2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): End2 {
        data = typeof data === 'object' ? data : {};
        let result = new End2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IEnd2 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class Start3 implements IStart3 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IStart3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): Start3 {
        data = typeof data === 'object' ? data : {};
        let result = new Start3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IStart3 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class End3 implements IEnd3 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IEnd3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): End3 {
        data = typeof data === 'object' ? data : {};
        let result = new End3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IEnd3 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class Start4 implements IStart4 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IStart4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): Start4 {
        data = typeof data === 'object' ? data : {};
        let result = new Start4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IStart4 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class End4 implements IEnd4 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IEnd4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): End4 {
        data = typeof data === 'object' ? data : {};
        let result = new End4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IEnd4 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class Divisions implements IDivisions {
    /** id отделения */
    id?: number;
    /** Координаты отделения */
    coords?: string;
    /** Адрес отделения */
    address?: string;
    /** Станция метро ближайшая к отделению */
    metro?: string;
    /** Рабочие часы отделения */
    working_hours?: Working_hours6[];
    /** Разница во времени */
    timezone_difference?: number;
    /** Дата создания отделения */
    created_at?: string;
    /** Последнее обновление инфо отделения */
    updated_at?: string;
    /** Название отделения */
    name?: string;
    /** Телефон отделения */
    phone?: string;
    /** Город, в котором находится отделение */
    city?: string;
    /** Список автомобилей в отделении */
    cars?: Cars5[];

    [key: string]: any;

    constructor(data?: IDivisions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.coords = _data["coords"];
            this.address = _data["address"];
            this.metro = _data["metro"];
            if (Array.isArray(_data["working_hours"])) {
                this.working_hours = [] as any;
                for (let item of _data["working_hours"])
                    this.working_hours!.push(Working_hours6.fromJS(item));
            }
            this.timezone_difference = _data["timezone_difference"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.city = _data["city"];
            if (Array.isArray(_data["cars"])) {
                this.cars = [] as any;
                for (let item of _data["cars"])
                    this.cars!.push(Cars5.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Divisions {
        data = typeof data === 'object' ? data : {};
        let result = new Divisions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["coords"] = this.coords;
        data["address"] = this.address;
        data["metro"] = this.metro;
        if (Array.isArray(this.working_hours)) {
            data["working_hours"] = [];
            for (let item of this.working_hours)
                data["working_hours"].push(item.toJSON());
        }
        data["timezone_difference"] = this.timezone_difference;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["city"] = this.city;
        if (Array.isArray(this.cars)) {
            data["cars"] = [];
            for (let item of this.cars)
                data["cars"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDivisions {
    /** id отделения */
    id?: number;
    /** Координаты отделения */
    coords?: string;
    /** Адрес отделения */
    address?: string;
    /** Станция метро ближайшая к отделению */
    metro?: string;
    /** Рабочие часы отделения */
    working_hours?: Working_hours6[];
    /** Разница во времени */
    timezone_difference?: number;
    /** Дата создания отделения */
    created_at?: string;
    /** Последнее обновление инфо отделения */
    updated_at?: string;
    /** Название отделения */
    name?: string;
    /** Телефон отделения */
    phone?: string;
    /** Город, в котором находится отделение */
    city?: string;
    /** Список автомобилей в отделении */
    cars?: Cars5[];

    [key: string]: any;
}

export class Referral_info implements IReferral_info {
    /** код для рефферальной ссылки */
    referral_code?: string;
    status?: ReferralStatus;
    /** Количесство заработанных монет */
    coins?: number;

    [key: string]: any;

    constructor(data?: IReferral_info) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.referral_code = _data["referral_code"];
            this.status = _data["status"];
            this.coins = _data["coins"];
        }
    }

    static fromJS(data: any): Referral_info {
        data = typeof data === 'object' ? data : {};
        let result = new Referral_info();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["referral_code"] = this.referral_code;
        data["status"] = this.status;
        data["coins"] = this.coins;
        return data;
    }
}

export interface IReferral_info {
    /** код для рефферальной ссылки */
    referral_code?: string;
    status?: ReferralStatus;
    /** Количесство заработанных монет */
    coins?: number;

    [key: string]: any;
}

export class Docs implements IDocs {
    /** Тип документа */
    type?: string;
    /** URL документа */
    url?: string | undefined;

    [key: string]: any;

    constructor(data?: IDocs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Docs {
        data = typeof data === 'object' ? data : {};
        let result = new Docs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    }
}

export interface IDocs {
    /** Тип документа */
    type?: string;
    /** URL документа */
    url?: string | undefined;

    [key: string]: any;
}

export class Bookings2 implements IBookings2 {
    /** Идентификатор бронирования */
    id?: number;
    status?: BookingStatus;
    /** Дата начала бронирования в формате 'd.m.Y H:i' */
    start_date?: string;
    /** Дата окончания бронирования в формате 'd.m.Y H:i' */
    end_date?: string;
    /** Условия аренды */
    rent_term?: Rent_term3;
    /** Информация об автомобиле */
    car?: Car3;

    [key: string]: any;

    constructor(data?: IBookings2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.status = _data["status"];
            this.start_date = _data["start_date"];
            this.end_date = _data["end_date"];
            this.rent_term = _data["rent_term"] ? Rent_term3.fromJS(_data["rent_term"]) : <any>undefined;
            this.car = _data["car"] ? Car3.fromJS(_data["car"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Bookings2 {
        data = typeof data === 'object' ? data : {};
        let result = new Bookings2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["status"] = this.status;
        data["start_date"] = this.start_date;
        data["end_date"] = this.end_date;
        data["rent_term"] = this.rent_term ? this.rent_term.toJSON() : <any>undefined;
        data["car"] = this.car ? this.car.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBookings2 {
    /** Идентификатор бронирования */
    id?: number;
    status?: BookingStatus;
    /** Дата начала бронирования в формате 'd.m.Y H:i' */
    start_date?: string;
    /** Дата окончания бронирования в формате 'd.m.Y H:i' */
    end_date?: string;
    /** Условия аренды */
    rent_term?: Rent_term3;
    /** Информация об автомобиле */
    car?: Car3;

    [key: string]: any;
}

export class Working_hours5 implements IWorking_hours5 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start5;
    /** Время окончания работы */
    end?: End5;

    [key: string]: any;

    constructor(data?: IWorking_hours5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.day = _data["day"];
            this.start = _data["start"] ? Start5.fromJS(_data["start"]) : <any>undefined;
            this.end = _data["end"] ? End5.fromJS(_data["end"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Working_hours5 {
        data = typeof data === 'object' ? data : {};
        let result = new Working_hours5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["day"] = this.day;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorking_hours5 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start5;
    /** Время окончания работы */
    end?: End5;

    [key: string]: any;
}

export class Division implements IDivision {
    /** Адрес */
    address?: string;
    /** Координаты подразделения */
    coords?: string;
    phone?: string;

    [key: string]: any;

    constructor(data?: IDivision) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.address = _data["address"];
            this.coords = _data["coords"];
            this.phone = _data["phone"];
        }
    }

    static fromJS(data: any): Division {
        data = typeof data === 'object' ? data : {};
        let result = new Division();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["address"] = this.address;
        data["coords"] = this.coords;
        data["phone"] = this.phone;
        return data;
    }
}

export interface IDivision {
    /** Адрес */
    address?: string;
    /** Координаты подразделения */
    coords?: string;
    phone?: string;

    [key: string]: any;
}

export class Rent_term implements IRent_term {
    /** Сумма депозита за день */
    deposit_amount_daily?: number;
    /** Общая сумма депозита */
    deposit_amount_total?: number;
    /** Минимальный период в днях */
    minimum_period_days?: number;
    /** Возможность выкупа */
    is_buyout_possible?: boolean;
    schemas?: Schemas4[];

    [key: string]: any;

    constructor(data?: IRent_term) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.deposit_amount_daily = _data["deposit_amount_daily"];
            this.deposit_amount_total = _data["deposit_amount_total"];
            this.minimum_period_days = _data["minimum_period_days"];
            this.is_buyout_possible = _data["is_buyout_possible"];
            if (Array.isArray(_data["schemas"])) {
                this.schemas = [] as any;
                for (let item of _data["schemas"])
                    this.schemas!.push(Schemas4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Rent_term {
        data = typeof data === 'object' ? data : {};
        let result = new Rent_term();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["deposit_amount_daily"] = this.deposit_amount_daily;
        data["deposit_amount_total"] = this.deposit_amount_total;
        data["minimum_period_days"] = this.minimum_period_days;
        data["is_buyout_possible"] = this.is_buyout_possible;
        if (Array.isArray(this.schemas)) {
            data["schemas"] = [];
            for (let item of this.schemas)
                data["schemas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRent_term {
    /** Сумма депозита за день */
    deposit_amount_daily?: number;
    /** Общая сумма депозита */
    deposit_amount_total?: number;
    /** Минимальный период в днях */
    minimum_period_days?: number;
    /** Возможность выкупа */
    is_buyout_possible?: boolean;
    schemas?: Schemas4[];

    [key: string]: any;
}

export class Car implements ICar {
    id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    brand?: string;
    model?: string;
    year_produced?: number;
    /** Ссылки на изображения */
    images?: string[];
    сar_class?: CarClass;
    division?: Division3;

    [key: string]: any;

    constructor(data?: ICar) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.year_produced = _data["year_produced"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            this.сar_class = _data["сar_class"];
            this.division = _data["division"] ? Division3.fromJS(_data["division"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Car {
        data = typeof data === 'object' ? data : {};
        let result = new Car();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["year_produced"] = this.year_produced;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        data["сar_class"] = this.сar_class;
        data["division"] = this.division ? this.division.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICar {
    id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    brand?: string;
    model?: string;
    year_produced?: number;
    /** Ссылки на изображения */
    images?: string[];
    сar_class?: CarClass;
    division?: Division3;

    [key: string]: any;
}

export class Rent_term2 implements IRent_term2 {
    deposit_amount_daily?: number;
    deposit_amount_total?: number;
    minimum_period_days?: number;
    is_buyout_possible?: number;
    schemas?: Schemas5[];

    [key: string]: any;

    constructor(data?: IRent_term2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.deposit_amount_daily = _data["deposit_amount_daily"];
            this.deposit_amount_total = _data["deposit_amount_total"];
            this.minimum_period_days = _data["minimum_period_days"];
            this.is_buyout_possible = _data["is_buyout_possible"];
            if (Array.isArray(_data["schemas"])) {
                this.schemas = [] as any;
                for (let item of _data["schemas"])
                    this.schemas!.push(Schemas5.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Rent_term2 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent_term2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["deposit_amount_daily"] = this.deposit_amount_daily;
        data["deposit_amount_total"] = this.deposit_amount_total;
        data["minimum_period_days"] = this.minimum_period_days;
        data["is_buyout_possible"] = this.is_buyout_possible;
        if (Array.isArray(this.schemas)) {
            data["schemas"] = [];
            for (let item of this.schemas)
                data["schemas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRent_term2 {
    deposit_amount_daily?: number;
    deposit_amount_total?: number;
    minimum_period_days?: number;
    is_buyout_possible?: number;
    schemas?: Schemas5[];

    [key: string]: any;
}

export class Cars4 implements ICars4 {
    /** id автомобиля */
    id?: number;
    /** id тарифа */
    tariff_id?: number;
    /** id Подразделения */
    division_id?: number;
    /** найменование Подразделения */
    division_name_info?: string;
    /** Пробег автомобиля */
    mileage?: number;
    /** Государственный номер автомобиля */
    license_plate?: string;
    /** id условия аренды */
    rent_term_id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Марка автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** vin автомобиля */
    vin?: string;
    /** status_id автомобиля */
    status_id?: number;
    /** Ссылки на изображения автомобиля */
    images?: string[];
    status?: CarStatus;
    /** Дата создания записи об автомобиле */
    created_at?: string;
    /** Последнее обновление записи об автомобиле */
    updated_at?: string;
    /** Список бронирований для данного автомобиля */
    booking?: Booking3[];

    [key: string]: any;

    constructor(data?: ICars4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.tariff_id = _data["tariff_id"];
            this.division_id = _data["division_id"];
            this.division_name_info = _data["division_name_info"];
            this.mileage = _data["mileage"];
            this.license_plate = _data["license_plate"];
            this.rent_term_id = _data["rent_term_id"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.year_produced = _data["year_produced"];
            this.vin = _data["vin"];
            this.status_id = _data["status_id"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            this.status = _data["status"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            if (Array.isArray(_data["booking"])) {
                this.booking = [] as any;
                for (let item of _data["booking"])
                    this.booking!.push(Booking3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Cars4 {
        data = typeof data === 'object' ? data : {};
        let result = new Cars4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["tariff_id"] = this.tariff_id;
        data["division_id"] = this.division_id;
        data["division_name_info"] = this.division_name_info;
        data["mileage"] = this.mileage;
        data["license_plate"] = this.license_plate;
        data["rent_term_id"] = this.rent_term_id;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["year_produced"] = this.year_produced;
        data["vin"] = this.vin;
        data["status_id"] = this.status_id;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        data["status"] = this.status;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        if (Array.isArray(this.booking)) {
            data["booking"] = [];
            for (let item of this.booking)
                data["booking"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICars4 {
    /** id автомобиля */
    id?: number;
    /** id тарифа */
    tariff_id?: number;
    /** id Подразделения */
    division_id?: number;
    /** найменование Подразделения */
    division_name_info?: string;
    /** Пробег автомобиля */
    mileage?: number;
    /** Государственный номер автомобиля */
    license_plate?: string;
    /** id условия аренды */
    rent_term_id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Марка автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** vin автомобиля */
    vin?: string;
    /** status_id автомобиля */
    status_id?: number;
    /** Ссылки на изображения автомобиля */
    images?: string[];
    status?: CarStatus;
    /** Дата создания записи об автомобиле */
    created_at?: string;
    /** Последнее обновление записи об автомобиле */
    updated_at?: string;
    /** Список бронирований для данного автомобиля */
    booking?: Booking3[];

    [key: string]: any;
}

/** Список подразделений в парке */
export class Divisions2 implements IDivisions2 {
    /** id отделения */
    id?: number;
    /** Координаты отделения */
    coords?: string;
    /** Адрес отделения */
    address?: string;
    /** Станция метро ближайшая к отделению */
    metro?: string;
    /** Рабочие часы отделения */
    working_hours?: Working_hours7[];
    /** Разница во времени */
    timezone_difference?: number;
    /** Дата создания отделения */
    created_at?: string;
    /** Последнее обновление инфо отделения */
    updated_at?: string;
    /** Название отделения */
    name?: string;
    /** Телефон отделения */
    phone?: string;
    /** Город, в котором находится отделение */
    city?: string;

    [key: string]: any;

    constructor(data?: IDivisions2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.coords = _data["coords"];
            this.address = _data["address"];
            this.metro = _data["metro"];
            if (Array.isArray(_data["working_hours"])) {
                this.working_hours = [] as any;
                for (let item of _data["working_hours"])
                    this.working_hours!.push(Working_hours7.fromJS(item));
            }
            this.timezone_difference = _data["timezone_difference"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.city = _data["city"];
        }
    }

    static fromJS(data: any): Divisions2 {
        data = typeof data === 'object' ? data : {};
        let result = new Divisions2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["coords"] = this.coords;
        data["address"] = this.address;
        data["metro"] = this.metro;
        if (Array.isArray(this.working_hours)) {
            data["working_hours"] = [];
            for (let item of this.working_hours)
                data["working_hours"].push(item.toJSON());
        }
        data["timezone_difference"] = this.timezone_difference;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["city"] = this.city;
        return data;
    }
}

/** Список подразделений в парке */
export interface IDivisions2 {
    /** id отделения */
    id?: number;
    /** Координаты отделения */
    coords?: string;
    /** Адрес отделения */
    address?: string;
    /** Станция метро ближайшая к отделению */
    metro?: string;
    /** Рабочие часы отделения */
    working_hours?: Working_hours7[];
    /** Разница во времени */
    timezone_difference?: number;
    /** Дата создания отделения */
    created_at?: string;
    /** Последнее обновление инфо отделения */
    updated_at?: string;
    /** Название отделения */
    name?: string;
    /** Телефон отделения */
    phone?: string;
    /** Город, в котором находится отделение */
    city?: string;

    [key: string]: any;
}

export class Rent_terms implements IRent_terms {
    /** id тарифа */
    id?: number;
    /** Сумма депозита на день */
    deposit_amount_daily?: string;
    /** Общая сумма депозита */
    deposit_amount_total?: string;
    /** Минимальный период аренды в днях */
    minimum_period_days?: number;
    /** Название тарифа */
    name?: string;
    /** Возможность выкупа */
    is_buyout_possible?: number;
    /** Дата создания записи */
    created_at?: string;
    /** Дата последнего обновления записи */
    updated_at?: string;
    /** Схемы тарифов */
    schemas?: Schemas6[];

    [key: string]: any;

    constructor(data?: IRent_terms) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.deposit_amount_daily = _data["deposit_amount_daily"];
            this.deposit_amount_total = _data["deposit_amount_total"];
            this.minimum_period_days = _data["minimum_period_days"];
            this.name = _data["name"];
            this.is_buyout_possible = _data["is_buyout_possible"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            if (Array.isArray(_data["schemas"])) {
                this.schemas = [] as any;
                for (let item of _data["schemas"])
                    this.schemas!.push(Schemas6.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Rent_terms {
        data = typeof data === 'object' ? data : {};
        let result = new Rent_terms();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["deposit_amount_daily"] = this.deposit_amount_daily;
        data["deposit_amount_total"] = this.deposit_amount_total;
        data["minimum_period_days"] = this.minimum_period_days;
        data["name"] = this.name;
        data["is_buyout_possible"] = this.is_buyout_possible;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        if (Array.isArray(this.schemas)) {
            data["schemas"] = [];
            for (let item of this.schemas)
                data["schemas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRent_terms {
    /** id тарифа */
    id?: number;
    /** Сумма депозита на день */
    deposit_amount_daily?: string;
    /** Общая сумма депозита */
    deposit_amount_total?: string;
    /** Минимальный период аренды в днях */
    minimum_period_days?: number;
    /** Название тарифа */
    name?: string;
    /** Возможность выкупа */
    is_buyout_possible?: number;
    /** Дата создания записи */
    created_at?: string;
    /** Дата последнего обновления записи */
    updated_at?: string;
    /** Схемы тарифов */
    schemas?: Schemas6[];

    [key: string]: any;
}

export class Tariffs implements ITariffs {
    /** id тарифа */
    id?: number;
    class?: CarClass;
    /** Город */
    city?: string;
    /** id преступлений */
    criminal_ids?: string;
    /** Было ли аварий */
    has_caused_accident?: number;
    /** Опыт */
    experience?: number;
    /** Максимальное количество штрафов */
    max_fine_count?: number;
    /** Брошенный автомобиль */
    abandoned_car?: number;
    /** Минимальный балл */
    min_scoring?: number;
    /** Северный Кавказ */
    is_north_caucasus?: number;
    /** Запрещенные республики */
    forbidden_republic_ids?: string;
    /** Алкоголь */
    alcohol?: number;
    /** Дата создания записи */
    created_at?: string;
    /** Дата последнего обновления записи */
    updated_at?: string;

    [key: string]: any;

    constructor(data?: ITariffs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.class = _data["class"];
            this.city = _data["city"];
            this.criminal_ids = _data["criminal_ids"];
            this.has_caused_accident = _data["has_caused_accident"];
            this.experience = _data["experience"];
            this.max_fine_count = _data["max_fine_count"];
            this.abandoned_car = _data["abandoned_car"];
            this.min_scoring = _data["min_scoring"];
            this.is_north_caucasus = _data["is_north_caucasus"];
            this.forbidden_republic_ids = _data["forbidden_republic_ids"];
            this.alcohol = _data["alcohol"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
        }
    }

    static fromJS(data: any): Tariffs {
        data = typeof data === 'object' ? data : {};
        let result = new Tariffs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["class"] = this.class;
        data["city"] = this.city;
        data["criminal_ids"] = this.criminal_ids;
        data["has_caused_accident"] = this.has_caused_accident;
        data["experience"] = this.experience;
        data["max_fine_count"] = this.max_fine_count;
        data["abandoned_car"] = this.abandoned_car;
        data["min_scoring"] = this.min_scoring;
        data["is_north_caucasus"] = this.is_north_caucasus;
        data["forbidden_republic_ids"] = this.forbidden_republic_ids;
        data["alcohol"] = this.alcohol;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        return data;
    }
}

export interface ITariffs {
    /** id тарифа */
    id?: number;
    class?: CarClass;
    /** Город */
    city?: string;
    /** id преступлений */
    criminal_ids?: string;
    /** Было ли аварий */
    has_caused_accident?: number;
    /** Опыт */
    experience?: number;
    /** Максимальное количество штрафов */
    max_fine_count?: number;
    /** Брошенный автомобиль */
    abandoned_car?: number;
    /** Минимальный балл */
    min_scoring?: number;
    /** Северный Кавказ */
    is_north_caucasus?: number;
    /** Запрещенные республики */
    forbidden_republic_ids?: string;
    /** Алкоголь */
    alcohol?: number;
    /** Дата создания записи */
    created_at?: string;
    /** Дата последнего обновления записи */
    updated_at?: string;

    [key: string]: any;
}

export class Car2 implements ICar2 {
    car_id?: string;
    id?: number;
    division_id?: number;
    park_id?: number;
    tariff_id?: number;
    mileage?: string;
    license_plate?: string;
    rent_term_id?: number;
    fuel_type?: number;
    transmission_type?: number;
    brand?: string;
    model?: string;
    year_produced?: number;
    images?: string[];
    status?: number;
    status_id?: number;
    old_status_id?: number;
    created_at?: string;
    updated_at?: string;
    division?: Division4;

    [key: string]: any;

    constructor(data?: ICar2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.car_id = _data["car_id"];
            this.id = _data["id"];
            this.division_id = _data["division_id"];
            this.park_id = _data["park_id"];
            this.tariff_id = _data["tariff_id"];
            this.mileage = _data["mileage"];
            this.license_plate = _data["license_plate"];
            this.rent_term_id = _data["rent_term_id"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.year_produced = _data["year_produced"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            this.status = _data["status"];
            this.status_id = _data["status_id"];
            this.old_status_id = _data["old_status_id"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.division = _data["division"] ? Division4.fromJS(_data["division"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Car2 {
        data = typeof data === 'object' ? data : {};
        let result = new Car2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["car_id"] = this.car_id;
        data["id"] = this.id;
        data["division_id"] = this.division_id;
        data["park_id"] = this.park_id;
        data["tariff_id"] = this.tariff_id;
        data["mileage"] = this.mileage;
        data["license_plate"] = this.license_plate;
        data["rent_term_id"] = this.rent_term_id;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["year_produced"] = this.year_produced;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        data["status"] = this.status;
        data["status_id"] = this.status_id;
        data["old_status_id"] = this.old_status_id;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["division"] = this.division ? this.division.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICar2 {
    car_id?: string;
    id?: number;
    division_id?: number;
    park_id?: number;
    tariff_id?: number;
    mileage?: string;
    license_plate?: string;
    rent_term_id?: number;
    fuel_type?: number;
    transmission_type?: number;
    brand?: string;
    model?: string;
    year_produced?: number;
    images?: string[];
    status?: number;
    status_id?: number;
    old_status_id?: number;
    created_at?: string;
    updated_at?: string;
    division?: Division4;

    [key: string]: any;
}

export class Driver implements IDriver {
    id?: number;
    user_id?: number;
    city_id?: number;
    created_at?: string;
    updated_at?: string;
    user?: User3;

    [key: string]: any;

    constructor(data?: IDriver) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.user_id = _data["user_id"];
            this.city_id = _data["city_id"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.user = _data["user"] ? User3.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Driver {
        data = typeof data === 'object' ? data : {};
        let result = new Driver();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["user_id"] = this.user_id;
        data["city_id"] = this.city_id;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDriver {
    id?: number;
    user_id?: number;
    city_id?: number;
    created_at?: string;
    updated_at?: string;
    user?: User3;

    [key: string]: any;
}

export class Schema2 implements ISchema2 {
    id?: number;
    rent_term_id?: number;
    daily_amount?: number;
    non_working_days?: number;
    working_days?: number;
    created_at?: string;
    updated_at?: string;

    [key: string]: any;

    constructor(data?: ISchema2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.rent_term_id = _data["rent_term_id"];
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
        }
    }

    static fromJS(data: any): Schema2 {
        data = typeof data === 'object' ? data : {};
        let result = new Schema2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["rent_term_id"] = this.rent_term_id;
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        return data;
    }
}

export interface ISchema2 {
    id?: number;
    rent_term_id?: number;
    daily_amount?: number;
    non_working_days?: number;
    working_days?: number;
    created_at?: string;
    updated_at?: string;

    [key: string]: any;
}

export class User2 implements IUser2 {
    id?: number;
    phone?: string;
    name?: string;
    email?: string;

    [key: string]: any;

    constructor(data?: IUser2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.phone = _data["phone"];
            this.name = _data["name"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): User2 {
        data = typeof data === 'object' ? data : {};
        let result = new User2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["phone"] = this.phone;
        data["name"] = this.name;
        data["email"] = this.email;
        return data;
    }
}

export interface IUser2 {
    id?: number;
    phone?: string;
    name?: string;
    email?: string;

    [key: string]: any;
}

export class Booking2 implements IBooking2 {
    id?: number;
    status?: number;
    car_id?: number;
    car?: Car4;
    schema_id?: number;
    schema?: Schema3;
    driver_id?: number;
    booked_at?: string;
    booked_until?: string;
    park_id?: number;
    cancellation_source?: number;
    cancellation_reason?: string;

    [key: string]: any;

    constructor(data?: IBooking2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.status = _data["status"];
            this.car_id = _data["car_id"];
            this.car = _data["car"] ? Car4.fromJS(_data["car"]) : <any>undefined;
            this.schema_id = _data["schema_id"];
            this.schema = _data["schema"] ? Schema3.fromJS(_data["schema"]) : <any>undefined;
            this.driver_id = _data["driver_id"];
            this.booked_at = _data["booked_at"];
            this.booked_until = _data["booked_until"];
            this.park_id = _data["park_id"];
            this.cancellation_source = _data["cancellation_source"];
            this.cancellation_reason = _data["cancellation_reason"];
        }
    }

    static fromJS(data: any): Booking2 {
        data = typeof data === 'object' ? data : {};
        let result = new Booking2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["status"] = this.status;
        data["car_id"] = this.car_id;
        data["car"] = this.car ? this.car.toJSON() : <any>undefined;
        data["schema_id"] = this.schema_id;
        data["schema"] = this.schema ? this.schema.toJSON() : <any>undefined;
        data["driver_id"] = this.driver_id;
        data["booked_at"] = this.booked_at;
        data["booked_until"] = this.booked_until;
        data["park_id"] = this.park_id;
        data["cancellation_source"] = this.cancellation_source;
        data["cancellation_reason"] = this.cancellation_reason;
        return data;
    }
}

export interface IBooking2 {
    id?: number;
    status?: number;
    car_id?: number;
    car?: Car4;
    schema_id?: number;
    schema?: Schema3;
    driver_id?: number;
    booked_at?: string;
    booked_until?: string;
    park_id?: number;
    cancellation_source?: number;
    cancellation_reason?: string;

    [key: string]: any;
}

export class Division2 implements IDivision2 {
    id?: number;
    city_id?: number;
    name?: string;
    phone?: string;
    city?: City;
    manager?: Manager2;

    [key: string]: any;

    constructor(data?: IDivision2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.city_id = _data["city_id"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.city = _data["city"] ? City.fromJS(_data["city"]) : <any>undefined;
            this.manager = _data["manager"] ? Manager2.fromJS(_data["manager"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Division2 {
        data = typeof data === 'object' ? data : {};
        let result = new Division2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["city_id"] = this.city_id;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        data["manager"] = this.manager ? this.manager.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDivision2 {
    id?: number;
    city_id?: number;
    name?: string;
    phone?: string;
    city?: City;
    manager?: Manager2;

    [key: string]: any;
}

export class Application implements IApplication {
    id?: number;
    manager_id?: number;

    [key: string]: any;

    constructor(data?: IApplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.manager_id = _data["manager_id"];
        }
    }

    static fromJS(data: any): Application {
        data = typeof data === 'object' ? data : {};
        let result = new Application();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["manager_id"] = this.manager_id;
        return data;
    }
}

export interface IApplication {
    id?: number;
    manager_id?: number;

    [key: string]: any;
}

export class Manager implements IManager {
    id?: number;
    user_id?: number;
    user?: User4;

    [key: string]: any;

    constructor(data?: IManager) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.user_id = _data["user_id"];
            this.user = _data["user"] ? User4.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Manager {
        data = typeof data === 'object' ? data : {};
        let result = new Manager();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["user_id"] = this.user_id;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IManager {
    id?: number;
    user_id?: number;
    user?: User4;

    [key: string]: any;
}

export class Working_hours6 implements IWorking_hours6 {
    /** День недели */
    day?: string;
    end?: End6;
    start?: Start6;

    [key: string]: any;

    constructor(data?: IWorking_hours6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.day = _data["day"];
            this.end = _data["end"] ? End6.fromJS(_data["end"]) : <any>undefined;
            this.start = _data["start"] ? Start6.fromJS(_data["start"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Working_hours6 {
        data = typeof data === 'object' ? data : {};
        let result = new Working_hours6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["day"] = this.day;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorking_hours6 {
    /** День недели */
    day?: string;
    end?: End6;
    start?: Start6;

    [key: string]: any;
}

export class Cars5 implements ICars5 {
    /** id автомобиля */
    id?: number;
    /** id тарифа */
    tariff_id?: number;
    /** Пробег автомобиля */
    mileage?: number;
    /** Государственный номер автомобиля */
    license_plate?: string;
    /** id условия аренды */
    rent_term_id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Марка автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** vin автомобиля */
    vin?: string;
    /** Ссылки на изображения автомобиля */
    images?: string[];
    status?: CarStatus;
    /** Дата создания записи об автомобиле */
    created_at?: string;
    /** Последнее обновление записи об автомобиле */
    updated_at?: string;
    /** Список бронирований для данного автомобиля */
    booking?: Booking4[];

    [key: string]: any;

    constructor(data?: ICars5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.tariff_id = _data["tariff_id"];
            this.mileage = _data["mileage"];
            this.license_plate = _data["license_plate"];
            this.rent_term_id = _data["rent_term_id"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.year_produced = _data["year_produced"];
            this.vin = _data["vin"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            this.status = _data["status"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            if (Array.isArray(_data["booking"])) {
                this.booking = [] as any;
                for (let item of _data["booking"])
                    this.booking!.push(Booking4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Cars5 {
        data = typeof data === 'object' ? data : {};
        let result = new Cars5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["tariff_id"] = this.tariff_id;
        data["mileage"] = this.mileage;
        data["license_plate"] = this.license_plate;
        data["rent_term_id"] = this.rent_term_id;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["year_produced"] = this.year_produced;
        data["vin"] = this.vin;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        data["status"] = this.status;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        if (Array.isArray(this.booking)) {
            data["booking"] = [];
            for (let item of this.booking)
                data["booking"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICars5 {
    /** id автомобиля */
    id?: number;
    /** id тарифа */
    tariff_id?: number;
    /** Пробег автомобиля */
    mileage?: number;
    /** Государственный номер автомобиля */
    license_plate?: string;
    /** id условия аренды */
    rent_term_id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Марка автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** vin автомобиля */
    vin?: string;
    /** Ссылки на изображения автомобиля */
    images?: string[];
    status?: CarStatus;
    /** Дата создания записи об автомобиле */
    created_at?: string;
    /** Последнее обновление записи об автомобиле */
    updated_at?: string;
    /** Список бронирований для данного автомобиля */
    booking?: Booking4[];

    [key: string]: any;
}

export class Rent_term3 implements IRent_term3 {
    deposit_amount_daily?: number;
    deposit_amount_total?: number;
    minimum_period_days?: number;
    is_buyout_possible?: number;
    schemas?: Schemas7[];

    [key: string]: any;

    constructor(data?: IRent_term3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.deposit_amount_daily = _data["deposit_amount_daily"];
            this.deposit_amount_total = _data["deposit_amount_total"];
            this.minimum_period_days = _data["minimum_period_days"];
            this.is_buyout_possible = _data["is_buyout_possible"];
            if (Array.isArray(_data["schemas"])) {
                this.schemas = [] as any;
                for (let item of _data["schemas"])
                    this.schemas!.push(Schemas7.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Rent_term3 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent_term3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["deposit_amount_daily"] = this.deposit_amount_daily;
        data["deposit_amount_total"] = this.deposit_amount_total;
        data["minimum_period_days"] = this.minimum_period_days;
        data["is_buyout_possible"] = this.is_buyout_possible;
        if (Array.isArray(this.schemas)) {
            data["schemas"] = [];
            for (let item of this.schemas)
                data["schemas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRent_term3 {
    deposit_amount_daily?: number;
    deposit_amount_total?: number;
    minimum_period_days?: number;
    is_buyout_possible?: number;
    schemas?: Schemas7[];

    [key: string]: any;
}

export class Car3 implements ICar3 {
    id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    сar_class?: CarClass;
    brand?: string;
    model?: string;
    year_produced?: number;
    /** Ссылки на изображения */
    images?: string[];
    /** Информация о дивизионе */
    division?: Division5;

    [key: string]: any;

    constructor(data?: ICar3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.сar_class = _data["сar_class"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.year_produced = _data["year_produced"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            this.division = _data["division"] ? Division5.fromJS(_data["division"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Car3 {
        data = typeof data === 'object' ? data : {};
        let result = new Car3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["сar_class"] = this.сar_class;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["year_produced"] = this.year_produced;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        data["division"] = this.division ? this.division.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICar3 {
    id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    сar_class?: CarClass;
    brand?: string;
    model?: string;
    year_produced?: number;
    /** Ссылки на изображения */
    images?: string[];
    /** Информация о дивизионе */
    division?: Division5;

    [key: string]: any;
}

export class Start5 implements IStart5 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IStart5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): Start5 {
        data = typeof data === 'object' ? data : {};
        let result = new Start5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IStart5 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class End5 implements IEnd5 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IEnd5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): End5 {
        data = typeof data === 'object' ? data : {};
        let result = new End5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IEnd5 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class Schemas4 implements ISchemas4 {
    /** Суточная стоимость */
    daily_amount?: number;
    id?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchemas4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.daily_amount = _data["daily_amount"];
            this.id = _data["id"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schemas4 {
        data = typeof data === 'object' ? data : {};
        let result = new Schemas4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["daily_amount"] = this.daily_amount;
        data["id"] = this.id;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchemas4 {
    /** Суточная стоимость */
    daily_amount?: number;
    id?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;
}

export class Division3 implements IDivision3 {
    coords?: string;
    address?: string;
    phone?: string;
    /** Расписание работы парка */
    working_hours?: Working_hours8[];
    park?: Park3;

    [key: string]: any;

    constructor(data?: IDivision3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.coords = _data["coords"];
            this.address = _data["address"];
            this.phone = _data["phone"];
            if (Array.isArray(_data["working_hours"])) {
                this.working_hours = [] as any;
                for (let item of _data["working_hours"])
                    this.working_hours!.push(Working_hours8.fromJS(item));
            }
            this.park = _data["park"] ? Park3.fromJS(_data["park"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Division3 {
        data = typeof data === 'object' ? data : {};
        let result = new Division3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["coords"] = this.coords;
        data["address"] = this.address;
        data["phone"] = this.phone;
        if (Array.isArray(this.working_hours)) {
            data["working_hours"] = [];
            for (let item of this.working_hours)
                data["working_hours"].push(item.toJSON());
        }
        data["park"] = this.park ? this.park.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDivision3 {
    coords?: string;
    address?: string;
    phone?: string;
    /** Расписание работы парка */
    working_hours?: Working_hours8[];
    park?: Park3;

    [key: string]: any;
}

export class Schemas5 implements ISchemas5 {
    daily_amount?: number;
    non_working_days?: number;
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchemas5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schemas5 {
        data = typeof data === 'object' ? data : {};
        let result = new Schemas5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchemas5 {
    daily_amount?: number;
    non_working_days?: number;
    working_days?: number;

    [key: string]: any;
}

export class Booking3 implements IBooking3 {
    /** id бронирования */
    id?: number;
    /** статус бронирования */
    status?: number;
    /** id схемы */
    schema_id?: number;
    /** id автомобиля */
    car_id?: number;
    /** id водителя */
    driver_id?: number;
    /** дата и время начала бронирования */
    booked_at?: string;
    /** дата и время окончания бронирования */
    booked_until?: string;
    /** id парка */
    park_id?: number;
    /** дата создания записи */
    created_at?: string;
    /** дата последнего обновления записи */
    updated_at?: string;

    [key: string]: any;

    constructor(data?: IBooking3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.status = _data["status"];
            this.schema_id = _data["schema_id"];
            this.car_id = _data["car_id"];
            this.driver_id = _data["driver_id"];
            this.booked_at = _data["booked_at"];
            this.booked_until = _data["booked_until"];
            this.park_id = _data["park_id"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
        }
    }

    static fromJS(data: any): Booking3 {
        data = typeof data === 'object' ? data : {};
        let result = new Booking3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["status"] = this.status;
        data["schema_id"] = this.schema_id;
        data["car_id"] = this.car_id;
        data["driver_id"] = this.driver_id;
        data["booked_at"] = this.booked_at;
        data["booked_until"] = this.booked_until;
        data["park_id"] = this.park_id;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        return data;
    }
}

export interface IBooking3 {
    /** id бронирования */
    id?: number;
    /** статус бронирования */
    status?: number;
    /** id схемы */
    schema_id?: number;
    /** id автомобиля */
    car_id?: number;
    /** id водителя */
    driver_id?: number;
    /** дата и время начала бронирования */
    booked_at?: string;
    /** дата и время окончания бронирования */
    booked_until?: string;
    /** id парка */
    park_id?: number;
    /** дата создания записи */
    created_at?: string;
    /** дата последнего обновления записи */
    updated_at?: string;

    [key: string]: any;
}

export class Working_hours7 implements IWorking_hours7 {
    /** День недели */
    day?: string;
    end?: End7;
    start?: Start7;

    [key: string]: any;

    constructor(data?: IWorking_hours7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.day = _data["day"];
            this.end = _data["end"] ? End7.fromJS(_data["end"]) : <any>undefined;
            this.start = _data["start"] ? Start7.fromJS(_data["start"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Working_hours7 {
        data = typeof data === 'object' ? data : {};
        let result = new Working_hours7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["day"] = this.day;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorking_hours7 {
    /** День недели */
    day?: string;
    end?: End7;
    start?: Start7;

    [key: string]: any;
}

export class Schemas6 implements ISchemas6 {
    /** id схемы */
    id?: number;
    /** Сумма за день */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;
    /** Дата создания записи */
    created_at?: string;
    /** Дата последнего обновления записи */
    updated_at?: string;

    [key: string]: any;

    constructor(data?: ISchemas6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
        }
    }

    static fromJS(data: any): Schemas6 {
        data = typeof data === 'object' ? data : {};
        let result = new Schemas6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        return data;
    }
}

export interface ISchemas6 {
    /** id схемы */
    id?: number;
    /** Сумма за день */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;
    /** Дата создания записи */
    created_at?: string;
    /** Дата последнего обновления записи */
    updated_at?: string;

    [key: string]: any;
}

export class Division4 implements IDivision4 {
    id?: number;
    park_id?: number;
    city_id?: number;
    coords?: string;
    address?: string;
    metro?: string;
    working_hours?: Working_hours9[];
    timezone_difference?: number;
    created_at?: string;
    updated_at?: string;
    name?: string;
    phone?: string;
    city?: City2;

    [key: string]: any;

    constructor(data?: IDivision4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.park_id = _data["park_id"];
            this.city_id = _data["city_id"];
            this.coords = _data["coords"];
            this.address = _data["address"];
            this.metro = _data["metro"];
            if (Array.isArray(_data["working_hours"])) {
                this.working_hours = [] as any;
                for (let item of _data["working_hours"])
                    this.working_hours!.push(Working_hours9.fromJS(item));
            }
            this.timezone_difference = _data["timezone_difference"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.city = _data["city"] ? City2.fromJS(_data["city"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Division4 {
        data = typeof data === 'object' ? data : {};
        let result = new Division4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["park_id"] = this.park_id;
        data["city_id"] = this.city_id;
        data["coords"] = this.coords;
        data["address"] = this.address;
        data["metro"] = this.metro;
        if (Array.isArray(this.working_hours)) {
            data["working_hours"] = [];
            for (let item of this.working_hours)
                data["working_hours"].push(item.toJSON());
        }
        data["timezone_difference"] = this.timezone_difference;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDivision4 {
    id?: number;
    park_id?: number;
    city_id?: number;
    coords?: string;
    address?: string;
    metro?: string;
    working_hours?: Working_hours9[];
    timezone_difference?: number;
    created_at?: string;
    updated_at?: string;
    name?: string;
    phone?: string;
    city?: City2;

    [key: string]: any;
}

export class User3 implements IUser3 {
    id?: number;
    code?: number;
    role_id?: number;
    user_status?: number;
    phone?: string;
    name?: string;
    email?: string;
    avatar?: string;
    email_verified_at?: string;
    created_at?: string;
    updated_at?: string;
    user_type?: number;

    [key: string]: any;

    constructor(data?: IUser3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.code = _data["code"];
            this.role_id = _data["role_id"];
            this.user_status = _data["user_status"];
            this.phone = _data["phone"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.avatar = _data["avatar"];
            this.email_verified_at = _data["email_verified_at"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
            this.user_type = _data["user_type"];
        }
    }

    static fromJS(data: any): User3 {
        data = typeof data === 'object' ? data : {};
        let result = new User3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["code"] = this.code;
        data["role_id"] = this.role_id;
        data["user_status"] = this.user_status;
        data["phone"] = this.phone;
        data["name"] = this.name;
        data["email"] = this.email;
        data["avatar"] = this.avatar;
        data["email_verified_at"] = this.email_verified_at;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        data["user_type"] = this.user_type;
        return data;
    }
}

export interface IUser3 {
    id?: number;
    code?: number;
    role_id?: number;
    user_status?: number;
    phone?: string;
    name?: string;
    email?: string;
    avatar?: string;
    email_verified_at?: string;
    created_at?: string;
    updated_at?: string;
    user_type?: number;

    [key: string]: any;
}

export class Car4 implements ICar4 {
    id?: number;
    license_plate?: string;
    brand?: string;
    model?: string;
    year_produced?: number;
    car_id?: string;

    [key: string]: any;

    constructor(data?: ICar4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.license_plate = _data["license_plate"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.year_produced = _data["year_produced"];
            this.car_id = _data["car_id"];
        }
    }

    static fromJS(data: any): Car4 {
        data = typeof data === 'object' ? data : {};
        let result = new Car4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["license_plate"] = this.license_plate;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["year_produced"] = this.year_produced;
        data["car_id"] = this.car_id;
        return data;
    }
}

export interface ICar4 {
    id?: number;
    license_plate?: string;
    brand?: string;
    model?: string;
    year_produced?: number;
    car_id?: string;

    [key: string]: any;
}

export class Schema3 implements ISchema3 {
    id?: number;
    daily_amount?: number;
    non_working_days?: number;
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchema3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schema3 {
        data = typeof data === 'object' ? data : {};
        let result = new Schema3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchema3 {
    id?: number;
    daily_amount?: number;
    non_working_days?: number;
    working_days?: number;

    [key: string]: any;
}

export class City implements ICity {
    name?: number;

    [key: string]: any;

    constructor(data?: ICity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): City {
        data = typeof data === 'object' ? data : {};
        let result = new City();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        return data;
    }
}

export interface ICity {
    name?: number;

    [key: string]: any;
}

export class Manager2 implements IManager2 {
    id?: number;
    user_id?: number;
    user?: User5;

    [key: string]: any;

    constructor(data?: IManager2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.user_id = _data["user_id"];
            this.user = _data["user"] ? User5.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Manager2 {
        data = typeof data === 'object' ? data : {};
        let result = new Manager2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["user_id"] = this.user_id;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IManager2 {
    id?: number;
    user_id?: number;
    user?: User5;

    [key: string]: any;
}

export class User4 implements IUser4 {
    id?: number;
    name?: string;

    [key: string]: any;

    constructor(data?: IUser4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): User4 {
        data = typeof data === 'object' ? data : {};
        let result = new User4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUser4 {
    id?: number;
    name?: string;

    [key: string]: any;
}

export class End6 implements IEnd6 {
    /** Час окончания */
    hours?: number;
    /** Минуты окончания */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IEnd6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): End6 {
        data = typeof data === 'object' ? data : {};
        let result = new End6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IEnd6 {
    /** Час окончания */
    hours?: number;
    /** Минуты окончания */
    minutes?: number;

    [key: string]: any;
}

export class Start6 implements IStart6 {
    /** Час начала */
    hours?: number;
    /** Минуты начала */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IStart6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): Start6 {
        data = typeof data === 'object' ? data : {};
        let result = new Start6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IStart6 {
    /** Час начала */
    hours?: number;
    /** Минуты начала */
    minutes?: number;

    [key: string]: any;
}

export class Booking4 implements IBooking4 {
    /** id бронирования */
    id?: number;
    /** статус бронирования */
    status?: number;
    /** id схемы */
    schema_id?: number;
    /** id автомобиля */
    car_id?: number;
    /** id водителя */
    driver_id?: number;
    /** дата и время начала бронирования */
    booked_at?: string;
    /** дата и время окончания бронирования */
    booked_until?: string;
    /** id парка */
    park_id?: number;
    /** дата создания записи */
    created_at?: string;
    /** дата последнего обновления записи */
    updated_at?: string;

    [key: string]: any;

    constructor(data?: IBooking4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.status = _data["status"];
            this.schema_id = _data["schema_id"];
            this.car_id = _data["car_id"];
            this.driver_id = _data["driver_id"];
            this.booked_at = _data["booked_at"];
            this.booked_until = _data["booked_until"];
            this.park_id = _data["park_id"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
        }
    }

    static fromJS(data: any): Booking4 {
        data = typeof data === 'object' ? data : {};
        let result = new Booking4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["status"] = this.status;
        data["schema_id"] = this.schema_id;
        data["car_id"] = this.car_id;
        data["driver_id"] = this.driver_id;
        data["booked_at"] = this.booked_at;
        data["booked_until"] = this.booked_until;
        data["park_id"] = this.park_id;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        return data;
    }
}

export interface IBooking4 {
    /** id бронирования */
    id?: number;
    /** статус бронирования */
    status?: number;
    /** id схемы */
    schema_id?: number;
    /** id автомобиля */
    car_id?: number;
    /** id водителя */
    driver_id?: number;
    /** дата и время начала бронирования */
    booked_at?: string;
    /** дата и время окончания бронирования */
    booked_until?: string;
    /** id парка */
    park_id?: number;
    /** дата создания записи */
    created_at?: string;
    /** дата последнего обновления записи */
    updated_at?: string;

    [key: string]: any;
}

export class Schemas7 implements ISchemas7 {
    daily_amount?: number;
    non_working_days?: number;
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchemas7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schemas7 {
        data = typeof data === 'object' ? data : {};
        let result = new Schemas7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchemas7 {
    daily_amount?: number;
    non_working_days?: number;
    working_days?: number;

    [key: string]: any;
}

export class Division5 implements IDivision5 {
    address?: string;
    coords?: string;
    phone?: string;
    /** Расписание работы парка */
    working_hours?: Working_hours10[];
    /** Информация о парке */
    park?: Park4;

    [key: string]: any;

    constructor(data?: IDivision5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.address = _data["address"];
            this.coords = _data["coords"];
            this.phone = _data["phone"];
            if (Array.isArray(_data["working_hours"])) {
                this.working_hours = [] as any;
                for (let item of _data["working_hours"])
                    this.working_hours!.push(Working_hours10.fromJS(item));
            }
            this.park = _data["park"] ? Park4.fromJS(_data["park"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Division5 {
        data = typeof data === 'object' ? data : {};
        let result = new Division5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["address"] = this.address;
        data["coords"] = this.coords;
        data["phone"] = this.phone;
        if (Array.isArray(this.working_hours)) {
            data["working_hours"] = [];
            for (let item of this.working_hours)
                data["working_hours"].push(item.toJSON());
        }
        data["park"] = this.park ? this.park.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDivision5 {
    address?: string;
    coords?: string;
    phone?: string;
    /** Расписание работы парка */
    working_hours?: Working_hours10[];
    /** Информация о парке */
    park?: Park4;

    [key: string]: any;
}

export class Working_hours8 implements IWorking_hours8 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start8;
    /** Время окончания работы */
    end?: End8;

    [key: string]: any;

    constructor(data?: IWorking_hours8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.day = _data["day"];
            this.start = _data["start"] ? Start8.fromJS(_data["start"]) : <any>undefined;
            this.end = _data["end"] ? End8.fromJS(_data["end"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Working_hours8 {
        data = typeof data === 'object' ? data : {};
        let result = new Working_hours8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["day"] = this.day;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorking_hours8 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start8;
    /** Время окончания работы */
    end?: End8;

    [key: string]: any;
}

export class Park3 implements IPark3 {
    url?: string;
    commission?: number;
    park_name?: string;
    about?: string;

    [key: string]: any;

    constructor(data?: IPark3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.url = _data["url"];
            this.commission = _data["commission"];
            this.park_name = _data["park_name"];
            this.about = _data["about"];
        }
    }

    static fromJS(data: any): Park3 {
        data = typeof data === 'object' ? data : {};
        let result = new Park3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["url"] = this.url;
        data["commission"] = this.commission;
        data["park_name"] = this.park_name;
        data["about"] = this.about;
        return data;
    }
}

export interface IPark3 {
    url?: string;
    commission?: number;
    park_name?: string;
    about?: string;

    [key: string]: any;
}

export class End7 implements IEnd7 {
    /** Час окончания */
    hours?: number;
    /** Минуты окончания */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IEnd7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): End7 {
        data = typeof data === 'object' ? data : {};
        let result = new End7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IEnd7 {
    /** Час окончания */
    hours?: number;
    /** Минуты окончания */
    minutes?: number;

    [key: string]: any;
}

export class Start7 implements IStart7 {
    /** Час начала */
    hours?: number;
    /** Минуты начала */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IStart7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): Start7 {
        data = typeof data === 'object' ? data : {};
        let result = new Start7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IStart7 {
    /** Час начала */
    hours?: number;
    /** Минуты начала */
    minutes?: number;

    [key: string]: any;
}

export class Working_hours9 implements IWorking_hours9 {
    day?: string;
    end?: End9;
    start?: Start9;

    [key: string]: any;

    constructor(data?: IWorking_hours9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.day = _data["day"];
            this.end = _data["end"] ? End9.fromJS(_data["end"]) : <any>undefined;
            this.start = _data["start"] ? Start9.fromJS(_data["start"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Working_hours9 {
        data = typeof data === 'object' ? data : {};
        let result = new Working_hours9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["day"] = this.day;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorking_hours9 {
    day?: string;
    end?: End9;
    start?: Start9;

    [key: string]: any;
}

export class City2 implements ICity2 {
    id?: number;
    name?: string;
    created_at?: string;
    updated_at?: string;

    [key: string]: any;

    constructor(data?: ICity2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.created_at = _data["created_at"];
            this.updated_at = _data["updated_at"];
        }
    }

    static fromJS(data: any): City2 {
        data = typeof data === 'object' ? data : {};
        let result = new City2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["created_at"] = this.created_at;
        data["updated_at"] = this.updated_at;
        return data;
    }
}

export interface ICity2 {
    id?: number;
    name?: string;
    created_at?: string;
    updated_at?: string;

    [key: string]: any;
}

export class User5 implements IUser5 {
    id?: number;
    user_status?: number;
    phone?: string;
    name?: string;
    email?: string;

    [key: string]: any;

    constructor(data?: IUser5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.user_status = _data["user_status"];
            this.phone = _data["phone"];
            this.name = _data["name"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): User5 {
        data = typeof data === 'object' ? data : {};
        let result = new User5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["user_status"] = this.user_status;
        data["phone"] = this.phone;
        data["name"] = this.name;
        data["email"] = this.email;
        return data;
    }
}

export interface IUser5 {
    id?: number;
    user_status?: number;
    phone?: string;
    name?: string;
    email?: string;

    [key: string]: any;
}

export class Working_hours10 implements IWorking_hours10 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start10;
    /** Время окончания работы */
    end?: End10;

    [key: string]: any;

    constructor(data?: IWorking_hours10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.day = _data["day"];
            this.start = _data["start"] ? Start10.fromJS(_data["start"]) : <any>undefined;
            this.end = _data["end"] ? End10.fromJS(_data["end"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Working_hours10 {
        data = typeof data === 'object' ? data : {};
        let result = new Working_hours10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["day"] = this.day;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorking_hours10 {
    day?: DayOfWeek;
    /** Время начала работы */
    start?: Start10;
    /** Время окончания работы */
    end?: End10;

    [key: string]: any;
}

export class Park4 implements IPark4 {
    url?: string;
    commission?: number;
    park_name?: string;
    about?: string;

    [key: string]: any;

    constructor(data?: IPark4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.url = _data["url"];
            this.commission = _data["commission"];
            this.park_name = _data["park_name"];
            this.about = _data["about"];
        }
    }

    static fromJS(data: any): Park4 {
        data = typeof data === 'object' ? data : {};
        let result = new Park4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["url"] = this.url;
        data["commission"] = this.commission;
        data["park_name"] = this.park_name;
        data["about"] = this.about;
        return data;
    }
}

export interface IPark4 {
    url?: string;
    commission?: number;
    park_name?: string;
    about?: string;

    [key: string]: any;
}

export class Start8 implements IStart8 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IStart8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): Start8 {
        data = typeof data === 'object' ? data : {};
        let result = new Start8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IStart8 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class End8 implements IEnd8 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IEnd8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): End8 {
        data = typeof data === 'object' ? data : {};
        let result = new End8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IEnd8 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class End9 implements IEnd9 {
    hours?: number;
    minutes?: number;

    [key: string]: any;

    constructor(data?: IEnd9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): End9 {
        data = typeof data === 'object' ? data : {};
        let result = new End9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IEnd9 {
    hours?: number;
    minutes?: number;

    [key: string]: any;
}

export class Start9 implements IStart9 {
    hours?: number;
    minutes?: number;

    [key: string]: any;

    constructor(data?: IStart9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): Start9 {
        data = typeof data === 'object' ? data : {};
        let result = new Start9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IStart9 {
    hours?: number;
    minutes?: number;

    [key: string]: any;
}

export class Start10 implements IStart10 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IStart10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): Start10 {
        data = typeof data === 'object' ? data : {};
        let result = new Start10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IStart10 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export class End10 implements IEnd10 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;

    constructor(data?: IEnd10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hours = _data["hours"];
            this.minutes = _data["minutes"];
        }
    }

    static fromJS(data: any): End10 {
        data = typeof data === 'object' ? data : {};
        let result = new End10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hours"] = this.hours;
        data["minutes"] = this.minutes;
        return data;
    }
}

export interface IEnd10 {
    /** Часы (0-23) */
    hours?: number;
    /** Минуты (0-59) */
    minutes?: number;

    [key: string]: any;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}